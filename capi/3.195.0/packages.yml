paths:
  /v3/packages:
    get:
      summary: List packages
      description: Retrieve a paginated list of packages the user has access to
      tags:
        - packages
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
        - name: per_page
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 5000
        - name: order_by
          in: query
          description: Field to sort results by
          required: false
          schema:
            type: string
            enum: [created_at, updated_at, -created_at, -updated_at]
        - name: guids
          in: query
          description: Filter by package GUIDs (comma-separated)
          required: false
          schema:
            type: string
        - name: states
          in: query
          description: Filter by package states (comma-separated)
          required: false
          schema:
            type: string
            example: "READY,PROCESSING_UPLOAD"
        - name: types
          in: query
          description: Filter by package types (comma-separated)
          required: false
          schema:
            type: string
            example: "bits,docker,cnb"
        - name: app_guids
          in: query
          description: Filter by app GUIDs (comma-separated)
          required: false
          schema:
            type: string
        - name: space_guids
          in: query
          description: Filter by space GUIDs (comma-separated)
          required: false
          schema:
            type: string
        - name: organization_guids
          in: query
          description: Filter by organization GUIDs (comma-separated)
          required: false
          schema:
            type: string
        - name: label_selector
          in: query
          description: Filter by labels using label selector syntax
          required: false
          schema:
            type: string
            example: "environment=production,tier!=backend"
        - name: created_ats
          in: query
          description: Filter by creation timestamp range
          required: false
          schema:
            type: string
            example: "2020-01-01T00:00:00Z,2020-12-31T23:59:59Z"
        - name: updated_ats
          in: query
          description: Filter by update timestamp range
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/Package'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security:
        - bearerAuth: []

    post:
      summary: Create a package
      description: Create a new package for an app. Packages contain the source code or image reference for an app.
      tags:
        - packages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - relationships
              properties:
                type:
                  type: string
                  enum: [bits, docker, cnb]
                  description: Type of package
                data:
                  type: object
                  description: Package type specific data
                  properties:
                    image:
                      type: string
                      description: Docker image URL or OCI image reference (docker/cnb types)
                      example: "registry.example.com/my-app:latest"
                    username:
                      type: string
                      description: Username for private registry authentication
                    password:
                      type: string
                      description: Password for private registry authentication
                relationships:
                  type: object
                  required:
                    - app
                  properties:
                    app:
                      type: object
                      required:
                        - data
                      properties:
                        data:
                          type: object
                          required:
                            - guid
                          properties:
                            guid:
                              type: string
                              format: uuid
                metadata:
                  type: object
                  properties:
                    labels:
                      type: object
                      additionalProperties:
                        type: string
                        maxLength: 63
                    annotations:
                      type: object
                      additionalProperties:
                        type: string
                        maxLength: 5000
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security:
        - bearerAuth: []

  /v3/packages/{guid}:
    get:
      summary: Get a package
      description: Retrieve details of a specific package
      tags:
        - packages
      parameters:
        - name: guid
          in: path
          required: true
          description: The package GUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security:
        - bearerAuth: []

    patch:
      summary: Update a package
      description: Update metadata for a package
      tags:
        - packages
      parameters:
        - name: guid
          in: path
          required: true
          description: The package GUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  type: object
                  properties:
                    labels:
                      type: object
                      additionalProperties:
                        type: string
                        maxLength: 63
                    annotations:
                      type: object
                      additionalProperties:
                        type: string
                        maxLength: 5000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security:
        - bearerAuth: []

    delete:
      summary: Delete a package
      description: Delete a package. This will fail if the package is in use by a build or droplet.
      tags:
        - packages
      parameters:
        - name: guid
          in: path
          required: true
          description: The package GUID
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: Accepted
          headers:
            Location:
              description: URL to poll for job status
              schema:
                type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security:
        - bearerAuth: []

  /v3/packages/{guid}/upload:
    post:
      summary: Upload package bits
      description: Upload source code bits for a package. Only valid for packages of type 'bits'.
      tags:
        - packages
      parameters:
        - name: guid
          in: path
          required: true
          description: The package GUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - bits
              properties:
                bits:
                  type: string
                  format: binary
                  description: Zip file containing application source code
                resources:
                  type: string
                  description: Fingerprints of already-uploaded bits for resource matching
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security:
        - bearerAuth: []

  /v3/packages/{guid}/download:
    get:
      summary: Download package bits
      description: Download the bits for a package as a zip file. Only valid for packages of type 'bits' in READY state.
      tags:
        - packages
      parameters:
        - name: guid
          in: path
          required: true
          description: The package GUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '302':
          description: Found - Redirect to download URL
          headers:
            Location:
              description: URL to download the package
              schema:
                type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security:
        - bearerAuth: []

  /v3/packages/{guid}/copy:
    post:
      summary: Copy a package
      description: Copy a package to create a new package. Useful for creating multiple builds from the same source.
      tags:
        - packages
      parameters:
        - name: guid
          in: path
          required: true
          description: The source package GUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - relationships
              properties:
                relationships:
                  type: object
                  required:
                    - app
                  properties:
                    app:
                      type: object
                      required:
                        - data
                      properties:
                        data:
                          type: object
                          required:
                            - guid
                          properties:
                            guid:
                              type: string
                              format: uuid
                              description: GUID of the target app
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security:
        - bearerAuth: []

  /v3/apps/{guid}/packages:
    get:
      summary: List packages for an app
      description: List all packages associated with an app
      tags:
        - apps
        - packages
      parameters:
        - name: guid
          in: path
          required: true
          description: The app GUID
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
        - name: per_page
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 5000
        - name: order_by
          in: query
          description: Field to sort results by
          required: false
          schema:
            type: string
            enum: [created_at, updated_at, -created_at, -updated_at]
        - name: states
          in: query
          description: Filter by package states (comma-separated)
          required: false
          schema:
            type: string
        - name: types
          in: query
          description: Filter by package types (comma-separated)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/Package'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security:
        - bearerAuth: []

components:
  schemas:
    Package:
      type: object
      required:
        - guid
        - type
        - data
        - state
        - created_at
        - updated_at
        - relationships
        - links
        - metadata
      properties:
        guid:
          type: string
          format: uuid
          description: Unique identifier for the package
        type:
          type: string
          enum: [bits, docker, cnb]
          description: Type of package
        data:
          type: object
          description: Package type specific data
          properties:
            image:
              type: string
              description: Image reference for docker/cnb packages
            username:
              type: string
              description: Registry username (write-only)
            password:
              type: string
              description: Registry password (write-only)
            checksum:
              type: object
              description: Checksum of package bits
              properties:
                type:
                  type: string
                  enum: [sha256, sha1]
                value:
                  type: string
            error:
              type: string
              nullable: true
              description: Error message if package processing failed
        state:
          type: string
          enum: [AWAITING_UPLOAD, PROCESSING_UPLOAD, READY, FAILED, COPYING, EXPIRED]
          description: Current state of the package
        created_at:
          type: string
          format: date-time
          description: When the package was created
        updated_at:
          type: string
          format: date-time
          description: When the package was last updated
        relationships:
          type: object
          properties:
            app:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    guid:
                      type: string
                      format: uuid
        links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/Link'
            upload:
              $ref: '#/components/schemas/Link'
            download:
              $ref: '#/components/schemas/Link'
            app:
              $ref: '#/components/schemas/Link'
        metadata:
          type: object
          properties:
            labels:
              type: object
              additionalProperties:
                type: string
            annotations:
              type: object
              additionalProperties:
                type: string

    Pagination:
      type: object
      properties:
        total_results:
          type: integer
        total_pages:
          type: integer
        first:
          type: object
          properties:
            href:
              type: string
        last:
          type: object
          properties:
            href:
              type: string
        next:
          type: object
          nullable: true
          properties:
            href:
              type: string
        previous:
          type: object
          nullable: true
          properties:
            href:
              type: string

    Link:
      type: object
      required:
        - href
      properties:
        href:
          type: string
          format: uri

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    UnexpectedError:
      description: Unexpected Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT