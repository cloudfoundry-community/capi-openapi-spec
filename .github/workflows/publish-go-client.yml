name: Publish Go Client

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'CAPI version to publish (e.g., 3.195.0)'
        required: true
        type: string
      force:
        description: 'Force overwrite if tag exists'
        required: false
        type: boolean
        default: false

jobs:
  generate:
    name: Generate OpenAPI spec and SDK
    uses: ./.github/workflows/generate.yml
    with:
      version: ${{ inputs.version }}
      skip-tests: false

  publish:
    name: Publish Go client to repository
    needs: generate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout capi-openapi-spec
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Download Go SDK artifact
        uses: actions/download-artifact@v4
        with:
          name: go-sdk-${{ inputs.version }}
          path: sdk/${{ inputs.version }}/go/

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Setup SSH for target repo
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.CAPI_GO_CLIENT_DEPLOY_KEY }}

      - name: Clone capi-openapi-go-client repository
        run: |
          git clone git@github.com:cloudfoundry-community/capi-openapi-go-client.git ../capi-openapi-go-client
          cd ../capi-openapi-go-client
          git fetch --all --tags

      - name: Check if version already exists
        id: check_version
        run: |
          cd ../capi-openapi-go-client
          if git tag -l "v${{ inputs.version }}" | grep -q "v${{ inputs.version }}"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Version v${{ inputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Version v${{ inputs.version }} does not exist"
          fi

      - name: Publish to capi-openapi-go-client
        if: steps.check_version.outputs.exists != 'true' || inputs.force == true
        run: |
          cd ../capi-openapi-go-client
          
          # Clean existing files (except .git, README, LICENSE)
          find . -mindepth 1 -maxdepth 1 \( -name .git -o -name README.md -o -name LICENSE \) -prune -o -exec rm -rf {} +
          
          # Copy generated SDK files
          cp -r ../capi-openapi-spec/sdk/${{ inputs.version }}/go/* .
          
          # Update go.mod with correct module path if needed
          if [[ -f go.mod ]]; then
            sed -i 's|module .*|module github.com/cloudfoundry-community/capi-openapi-go-client/v3|' go.mod
          fi
          
          # Add all files
          git add -A
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Commit changes
          git commit -m "Update to CAPI v${{ inputs.version }}
          
          Generated from cloudfoundry-community/capi-openapi-spec
          Using Go ${{ steps.setup-go.outputs.go-version }}"
          
          # Tag the release
          if [[ "${{ inputs.force }}" == "true" ]] && [[ "${{ steps.check_version.outputs.exists }}" == "true" ]]; then
            echo "Force updating existing tag v${{ inputs.version }}"
            git tag -d "v${{ inputs.version }}" || true
            git push origin --delete "v${{ inputs.version }}" || true
          fi
          
          git tag "v${{ inputs.version }}"
          
          # Push changes and tags
          git push origin main
          git push origin "v${{ inputs.version }}"
          
          echo "Successfully published Go client v${{ inputs.version }}"

      - name: Create GitHub Release
        if: steps.check_version.outputs.exists != 'true' || inputs.force == true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ../capi-openapi-go-client
          
          # Create release notes
          cat > release-notes.md << EOF
          ## CAPI Go Client v${{ inputs.version }}
          
          This release updates the Go client to support CAPI v${{ inputs.version }}.
          
          ### What's Changed
          - Updated OpenAPI specification to CAPI v${{ inputs.version }}
          - Regenerated Go client using oapi-codegen
          - Built with Go ${{ steps.setup-go.outputs.go-version }}
          
          ### Installation
          
          \`\`\`bash
          go get github.com/cloudfoundry-community/capi-openapi-go-client/v3@v${{ inputs.version }}
          \`\`\`
          
          ### Documentation
          
          See the [main repository](https://github.com/cloudfoundry-community/capi-openapi-spec) for more information.
          EOF
          
          # Create the release
          gh release create "v${{ inputs.version }}" \
            --repo cloudfoundry-community/capi-openapi-go-client \
            --title "v${{ inputs.version }}" \
            --notes-file release-notes.md \
            --target main