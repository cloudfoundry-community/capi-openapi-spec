name: Comprehensive Testing

on:
  pull_request:
    paths:
      - 'capi/**/*.yml'
      - 'capi/**/*.yaml'
      - 'capi/**/*.json'
      - 'bin/**'
      - '.github/workflows/test-comprehensive.yml'
  workflow_dispatch:
    inputs:
      version:
        description: 'CAPI version to test'
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        required: false
        type: string

jobs:
  detect-versions:
    name: Detect versions to test
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.detect.outputs.versions }}
      matrix: ${{ steps.detect.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect versions
        id: detect
        run: |
          if [[ -n "${{ inputs.version }}" ]]; then
            # Use specified version
            VERSIONS='["${{ inputs.version }}"]'
          else
            # Detect versions from changed files or use latest
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              # Get changed CAPI versions
              CHANGED_VERSIONS=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | \
                grep -E '^capi/[0-9]+\.[0-9]+\.[0-9]+/' | \
                cut -d'/' -f2 | sort -u | jq -R -s -c 'split("\n")[:-1]')
              
              if [[ "$CHANGED_VERSIONS" != "[]" ]]; then
                VERSIONS="$CHANGED_VERSIONS"
              else
                # Use latest version if no CAPI files changed
                LATEST=$(ls -1 capi/ | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -1)
                VERSIONS="[\"$LATEST\"]"
              fi
            else
              # Use latest version for workflow_dispatch
              LATEST=$(ls -1 capi/ | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -1)
              VERSIONS="[\"$LATEST\"]"
            fi
          fi
          
          echo "versions=$VERSIONS" >> $GITHUB_OUTPUT
          echo "matrix={\"version\":$VERSIONS}" >> $GITHUB_OUTPUT
          echo "Testing versions: $VERSIONS"

  validate-spec:
    name: Validate OpenAPI Specification
    needs: detect-versions
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-versions.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Install validation tools
        run: |
          bun install -g @stoplight/spectral-cli@latest
          bun install -g @redocly/cli@latest

      - name: Check if OpenAPI spec exists
        id: check_spec
        run: |
          if [[ -f "capi/${{ matrix.version }}/openapi.json" ]]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "::warning::OpenAPI spec not found for version ${{ matrix.version }}"
          fi

      - name: Validate with Spectral
        if: steps.check_spec.outputs.exists == 'true'
        run: |
          echo "::group::Spectral validation for ${{ matrix.version }}"
          spectral lint capi/${{ matrix.version }}/openapi.json --ruleset config/.spectral.yml || true
          echo "::endgroup::"

      - name: Validate with Redocly
        if: steps.check_spec.outputs.exists == 'true'
        run: |
          echo "::group::Redocly validation for ${{ matrix.version }}"
          redocly lint capi/${{ matrix.version }}/openapi.json || true
          echo "::endgroup::"

      - name: Validate examples
        if: steps.check_spec.outputs.exists == 'true'
        run: |
          echo "::group::Example validation for ${{ matrix.version }}"
          if [[ -x "./bin/validate-examples" ]]; then
            ./bin/validate-examples capi/${{ matrix.version }}/openapi.json || true
          else
            echo "validate-examples script not found"
          fi
          echo "::endgroup::"

      - name: Validate schemas
        if: steps.check_spec.outputs.exists == 'true'
        run: |
          echo "::group::Schema validation for ${{ matrix.version }}"
          if [[ -x "./bin/test-schemas" ]]; then
            ./bin/test-schemas --version=${{ matrix.version }} || true
          else
            echo "test-schemas script not found"
          fi
          echo "::endgroup::"

  test-sdk-generation:
    name: Test SDK Generation
    needs: detect-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.detect-versions.outputs.versions) }}
        language: [go, python, java, typescript, ruby]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if OpenAPI spec exists
        id: check_spec
        run: |
          if [[ -f "capi/${{ matrix.version }}/openapi.json" ]]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup language environment - Go
        if: matrix.language == 'go' && steps.check_spec.outputs.exists == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Setup language environment - Python
        if: matrix.language == 'python' && steps.check_spec.outputs.exists == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup language environment - Java
        if: matrix.language == 'java' && steps.check_spec.outputs.exists == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup language environment - Node.js
        if: (matrix.language == 'typescript' || matrix.language == 'ruby') && steps.check_spec.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install OpenAPI Generator
        if: steps.check_spec.outputs.exists == 'true'
        run: |
          npm install -g @openapitools/openapi-generator-cli

      - name: Generate SDK
        if: steps.check_spec.outputs.exists == 'true'
        run: |
          echo "::group::Generating ${{ matrix.language }} SDK for v${{ matrix.version }}"
          
          # Create output directory
          mkdir -p test/sdk-integration/${{ matrix.version }}/${{ matrix.language }}
          
          # Map language to OpenAPI generator name
          case "${{ matrix.language }}" in
            typescript) LANG_NAME="typescript-fetch" ;;
            *) LANG_NAME="${{ matrix.language }}" ;;
          esac
          
          # Generate SDK
          openapi-generator-cli generate \
            -i capi/${{ matrix.version }}/openapi.json \
            -g $LANG_NAME \
            -o test/sdk-integration/${{ matrix.version }}/${{ matrix.language }} \
            --skip-validate-spec
          
          echo "::endgroup::"

      - name: Test SDK - Go
        if: matrix.language == 'go' && steps.check_spec.outputs.exists == 'true'
        run: |
          echo "::group::Testing Go SDK"
          cd test/sdk-integration/${{ matrix.version }}/go
          if [[ -f go.mod ]]; then
            go mod tidy
            go build ./...
            go test ./... -v || true
          fi
          echo "::endgroup::"

      - name: Test SDK - Python
        if: matrix.language == 'python' && steps.check_spec.outputs.exists == 'true'
        run: |
          echo "::group::Testing Python SDK"
          cd test/sdk-integration/${{ matrix.version }}/python
          if [[ -f setup.py ]]; then
            pip install -e .
            python -m pytest test/ || true
          fi
          echo "::endgroup::"

      - name: Test SDK - Java
        if: matrix.language == 'java' && steps.check_spec.outputs.exists == 'true'
        run: |
          echo "::group::Testing Java SDK"
          cd test/sdk-integration/${{ matrix.version }}/java
          if [[ -f pom.xml ]]; then
            mvn clean compile || true
          elif [[ -f build.gradle ]]; then
            ./gradlew build || true
          fi
          echo "::endgroup::"

      - name: Test SDK - TypeScript
        if: matrix.language == 'typescript' && steps.check_spec.outputs.exists == 'true'
        run: |
          echo "::group::Testing TypeScript SDK"
          cd test/sdk-integration/${{ matrix.version }}/typescript
          if [[ -f package.json ]]; then
            npm install
            npm run build || true
            npm test || true
          fi
          echo "::endgroup::"

      - name: Test SDK - Ruby
        if: matrix.language == 'ruby' && steps.check_spec.outputs.exists == 'true'
        run: |
          echo "::group::Testing Ruby SDK"
          cd test/sdk-integration/${{ matrix.version }}/ruby
          if [[ -f Gemfile ]]; then
            bundle install
            bundle exec rake || true
          fi
          echo "::endgroup::"

      - name: Upload SDK artifact
        if: always() && steps.check_spec.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: test-sdk-${{ matrix.version }}-${{ matrix.language }}
          path: test/sdk-integration/${{ matrix.version }}/${{ matrix.language }}/
          retention-days: 7

  integration-tests:
    name: Integration Tests
    needs: [detect-versions, validate-spec]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-versions.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          # Install test dependencies
          if [[ -f "test/requirements.txt" ]]; then
            pip install -r test/requirements.txt
          fi

      - name: Run integration tests
        run: |
          echo "::group::Integration tests for v${{ matrix.version }}"
          if [[ -x "./bin/test-integration" ]]; then
            ./bin/test-integration ${{ matrix.version }} || true
          else
            echo "Integration test script not found"
          fi
          echo "::endgroup::"

  test-summary:
    name: Test Summary
    needs: [validate-spec, test-sdk-generation, integration-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create test summary
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Validation results
          echo "### Validation Results" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.validate-spec.result }}" == "success" ]]; then
            echo "✅ OpenAPI specification validation passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ OpenAPI specification validation failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # SDK generation results
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### SDK Generation Results" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.test-sdk-generation.result }}" == "success" ]]; then
            echo "✅ All SDK generations completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Some SDK generations had issues" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Integration test results
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Integration Test Results" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "✅ Integration tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Integration tests had issues" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `## Test Results
            
            - **Validation**: ${{ needs.validate-spec.result }}
            - **SDK Generation**: ${{ needs.test-sdk-generation.result }}
            - **Integration Tests**: ${{ needs.integration-tests.result }}
            
            See the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });