#!/usr/bin/env perl
use strict;
use warnings;
use v5.30;
use File::Basename;
use File::Path qw(make_path);
use Getopt::Long;
use JSON::XS;
use LWP::Simple;
use Digest::SHA qw(sha256_hex);
use File::Slurp;
use Term::ANSIColor;

# Configuration
my $old_version = '3.195.0';
my $new_version;
my $check_url;
my $output_dir = 'change-reports';
my $verbose = 0;
my $json_output = 0;

GetOptions(
    'old-version=s' => \$old_version,
    'new-version=s' => \$new_version,
    'check-url=s'   => \$check_url,
    'output-dir=s'  => \$output_dir,
    'verbose'       => \$verbose,
    'json'          => \$json_output,
) or die "Error in command line arguments\n";

# CAPI documentation URL pattern
my $CAPI_URL_PATTERN = 'https://v3-apidocs.cloudfoundry.org/version/%s/index.html';

# Main execution
if ($check_url) {
    check_for_updates($check_url);
} else {
    compare_versions($old_version, $new_version);
}

sub check_for_updates {
    my ($url) = @_;
    
    print_info("Checking for updates at: $url");
    
    # Download current version
    my $content = get($url);
    unless ($content) {
        die "Failed to download content from $url\n";
    }
    
    # Calculate hash
    my $current_hash = sha256_hex($content);
    
    # Check if we have a stored hash
    my $hash_file = "$output_dir/hashes/current.sha256";
    my $stored_hash = '';
    
    if (-f $hash_file) {
        $stored_hash = read_file($hash_file);
        chomp $stored_hash;
    }
    
    # Compare hashes
    if ($current_hash eq $stored_hash) {
        print_success("No changes detected");
        exit 0;
    } else {
        print_warning("Changes detected!");
        
        # Save new hash
        make_path("$output_dir/hashes");
        write_file($hash_file, $current_hash);
        
        # Save content with timestamp
        my $timestamp = time();
        my $content_file = "$output_dir/versions/capi-$timestamp.html";
        make_path("$output_dir/versions");
        write_file($content_file, $content);
        
        print_info("Saved new version to: $content_file");
        
        # Trigger update workflow
        if ($json_output) {
            my $result = {
                status => 'changed',
                hash => $current_hash,
                previous_hash => $stored_hash,
                timestamp => $timestamp,
                file => $content_file
            };
            print encode_json($result);
        }
        
        exit 1; # Exit with error to trigger CI/CD
    }
}

sub compare_versions {
    my ($old_ver, $new_ver) = @_;
    
    unless ($new_ver) {
        die "New version required for comparison\n";
    }
    
    print_info("Comparing CAPI versions: $old_ver → $new_ver");
    
    # Load or download HTML files
    my $old_html = load_version_html($old_ver);
    my $new_html = load_version_html($new_ver);
    
    # Extract endpoints and content
    my $old_data = extract_api_data($old_html);
    my $new_data = extract_api_data($new_html);
    
    # Compare data
    my $changes = compare_api_data($old_data, $new_data);
    
    # Generate report
    generate_report($changes, $old_ver, $new_ver);
}

sub load_version_html {
    my ($version) = @_;
    
    my $file = "specs/capi/$version.html";
    
    if (-f $file) {
        print_info("Loading local file: $file");
        return read_file($file);
    }
    
    # Download if not found locally
    my $url = sprintf($CAPI_URL_PATTERN, $version);
    print_info("Downloading from: $url");
    
    my $content = get($url);
    unless ($content) {
        die "Failed to download CAPI documentation for version $version\n";
    }
    
    # Save for future use
    make_path(dirname($file));
    write_file($file, $content);
    
    return $content;
}

sub extract_api_data {
    my ($html) = @_;
    
    my %data = (
        endpoints => {},
        schemas => {},
        parameters => {},
        version => '',
    );
    
    # Extract version
    if ($html =~ /<title>.*?v(\d+\.\d+\.\d+).*?<\/title>/i) {
        $data{version} = $1;
    }
    
    # Extract endpoints (simplified - real implementation would use Mojo::DOM)
    while ($html =~ /<h4[^>]*id="definition"[^>]*>.*?<code[^>]*class="prettyprint"[^>]*>(\w+)\s+([^<]+)<\/code>/sg) {
        my ($method, $path) = ($1, $2);
        $data{endpoints}{"$method $path"} = {
            method => $method,
            path => $path,
        };
    }
    
    # Extract parameter tables
    while ($html =~ /<h4[^>]*id="(?:required|optional)-parameters"[^>]*>.*?<table[^>]*>(.*?)<\/table>/sg) {
        my $table = $1;
        while ($table =~ /<tr>.*?<td>([^<]+)<\/td>.*?<td>([^<]+)<\/td>/sg) {
            my ($name, $type) = ($1, $2);
            $data{parameters}{$name} = $type;
        }
    }
    
    print_verbose("Extracted " . scalar(keys %{$data{endpoints}}) . " endpoints");
    
    return \%data;
}

sub compare_api_data {
    my ($old, $new) = @_;
    
    my %changes = (
        added_endpoints => [],
        removed_endpoints => [],
        modified_endpoints => [],
        added_parameters => [],
        removed_parameters => [],
        version_change => {
            old => $old->{version},
            new => $new->{version},
        },
    );
    
    # Compare endpoints
    for my $endpoint (keys %{$new->{endpoints}}) {
        unless (exists $old->{endpoints}{$endpoint}) {
            push @{$changes{added_endpoints}}, $endpoint;
        }
    }
    
    for my $endpoint (keys %{$old->{endpoints}}) {
        unless (exists $new->{endpoints}{$endpoint}) {
            push @{$changes{removed_endpoints}}, $endpoint;
        }
    }
    
    # Compare parameters
    for my $param (keys %{$new->{parameters}}) {
        unless (exists $old->{parameters}{$param}) {
            push @{$changes{added_parameters}}, $param;
        }
    }
    
    for my $param (keys %{$old->{parameters}}) {
        unless (exists $new->{parameters}{$param}) {
            push @{$changes{removed_parameters}}, $param;
        }
    }
    
    return \%changes;
}

sub generate_report {
    my ($changes, $old_ver, $new_ver) = @_;
    
    my $timestamp = localtime();
    my $report_file = "$output_dir/changes-$old_ver-to-$new_ver.md";
    
    make_path($output_dir);
    
    my $report = "# CAPI Changes Report: $old_ver → $new_ver\n\n";
    $report .= "Generated: $timestamp\n\n";
    
    # Summary
    my $total_changes = @{$changes->{added_endpoints}} + @{$changes->{removed_endpoints}} +
                       @{$changes->{added_parameters}} + @{$changes->{removed_parameters}};
    
    $report .= "## Summary\n\n";
    $report .= "- Total changes: $total_changes\n";
    $report .= "- Added endpoints: " . scalar(@{$changes->{added_endpoints}}) . "\n";
    $report .= "- Removed endpoints: " . scalar(@{$changes->{removed_endpoints}}) . "\n";
    $report .= "- Added parameters: " . scalar(@{$changes->{added_parameters}}) . "\n";
    $report .= "- Removed parameters: " . scalar(@{$changes->{removed_parameters}}) . "\n\n";
    
    # Breaking changes
    if (@{$changes->{removed_endpoints}} || @{$changes->{removed_parameters}}) {
        $report .= "## ⚠️ Breaking Changes\n\n";
        
        if (@{$changes->{removed_endpoints}}) {
            $report .= "### Removed Endpoints\n\n";
            for my $endpoint (@{$changes->{removed_endpoints}}) {
                $report .= "- `$endpoint`\n";
            }
            $report .= "\n";
        }
        
        if (@{$changes->{removed_parameters}}) {
            $report .= "### Removed Parameters\n\n";
            for my $param (@{$changes->{removed_parameters}}) {
                $report .= "- `$param`\n";
            }
            $report .= "\n";
        }
    }
    
    # New features
    if (@{$changes->{added_endpoints}} || @{$changes->{added_parameters}}) {
        $report .= "## ✨ New Features\n\n";
        
        if (@{$changes->{added_endpoints}}) {
            $report .= "### Added Endpoints\n\n";
            for my $endpoint (@{$changes->{added_endpoints}}) {
                $report .= "- `$endpoint`\n";
            }
            $report .= "\n";
        }
        
        if (@{$changes->{added_parameters}}) {
            $report .= "### Added Parameters\n\n";
            for my $param (@{$changes->{added_parameters}}) {
                $report .= "- `$param`\n";
            }
            $report .= "\n";
        }
    }
    
    # Action items
    $report .= "## Action Required\n\n";
    if ($total_changes > 0) {
        $report .= "1. Run OpenAPI generation for version $new_ver\n";
        $report .= "2. Validate generated specification\n";
        $report .= "3. Update SDKs if breaking changes exist\n";
        $report .= "4. Create migration guide if needed\n";
    } else {
        $report .= "No changes detected. No action required.\n";
    }
    
    # Save report
    write_file($report_file, $report);
    print_success("Report saved to: $report_file");
    
    # JSON output for CI/CD
    if ($json_output) {
        my $json_file = "$output_dir/changes-$old_ver-to-$new_ver.json";
        write_file($json_file, encode_json($changes));
        print encode_json({
            report => $report_file,
            json => $json_file,
            has_breaking_changes => (@{$changes->{removed_endpoints}} || @{$changes->{removed_parameters}}) ? 1 : 0,
            total_changes => $total_changes,
        });
    }
    
    # Exit code based on changes
    exit($total_changes > 0 ? 1 : 0);
}

# Helper functions
sub print_info {
    my ($msg) = @_;
    say colored("ℹ️  $msg", 'blue') unless $json_output;
}

sub print_success {
    my ($msg) = @_;
    say colored("✅ $msg", 'green') unless $json_output;
}

sub print_warning {
    my ($msg) = @_;
    say colored("⚠️  $msg", 'yellow') unless $json_output;
}

sub print_verbose {
    my ($msg) = @_;
    say colored("   $msg", 'grey') if $verbose && !$json_output;
}

__END__

=head1 NAME

detect-changes - Detect changes in CAPI documentation

=head1 SYNOPSIS

detect-changes [options]

=head1 OPTIONS

=over 4

=item B<--old-version>

Old CAPI version to compare (default: 3.195.0)

=item B<--new-version>

New CAPI version to compare

=item B<--check-url>

URL to monitor for changes

=item B<--output-dir>

Directory for reports (default: change-reports)

=item B<--verbose>

Enable verbose output

=item B<--json>

Output results as JSON

=back

=head1 EXAMPLES

    # Compare two versions
    ./bin/detect-changes --old-version=3.194.0 --new-version=3.195.0
    
    # Monitor URL for changes
    ./bin/detect-changes --check-url=https://v3-apidocs.cloudfoundry.org/version/3.195.0/index.html
    
    # Generate JSON output for CI/CD
    ./bin/detect-changes --old-version=3.194.0 --new-version=3.195.0 --json

=cut