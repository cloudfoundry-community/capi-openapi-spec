#!/usr/bin/env perl

use strict;
use warnings;
use v5.20;
use JSON::XS;
use File::Slurp;
use File::Path qw(make_path remove_tree);
use Term::ANSIColor qw(colored);
use Getopt::Long;
use File::Spec;
use Cwd qw(abs_path);
use File::Basename;

# Get project root directory
my $script_dir = dirname(abs_path($0));
my $project_root = dirname($script_dir);

# Command line options
my $spec_file = 'capi/3.195.0/enhanced/openapi.json';
my $version = '3.195.0';
my $test_languages = 'go,python,java,typescript-node,ruby';
my $output_dir = File::Spec->catfile($project_root, 'test', 'sdk-integration');
my $clean = 0;
my $verbose = 0;
my $test_api_url;
my $test_token;
my $no_cleanup = 0;

GetOptions(
    'spec=s' => \$spec_file,
    'version=s' => \$version,
    'languages=s' => \$test_languages,
    'output=s' => \$output_dir,
    'clean' => \$clean,
    'verbose' => \$verbose,
    'api-url=s' => \$test_api_url,
    'token=s' => \$test_token,
    'no-cleanup' => \$no_cleanup,
) or die usage();

sub usage {
    return <<EOF;
Usage: $0 [options]

Options:
  --spec=FILE          OpenAPI spec file (default: capi/3.195.0/enhanced/openapi.json)
  --version=VERSION    CAPI version (default: 3.195.0)
  --languages=LIST     Comma-separated list of languages to test (default: go,python,java,typescript-node,ruby)
  --output=DIR         Output directory for generated SDKs (default: test/sdk-integration)
  --clean              Clean output directory before starting
  --verbose            Show detailed output
  --api-url=URL        Live API URL for testing (optional)
  --token=TOKEN        Authentication token for live API testing (optional)
  --no-cleanup         Don't clean up generated SDKs after testing

Examples:
  $0                                           # Test default languages
  $0 --languages=go,python                     # Test specific languages
  $0 --api-url=https://api.cf.example.com --token=\$CF_TOKEN  # Test against live API
EOF
}

# Test results
my %results = (
    total => 0,
    passed => 0,
    failed => 0,
    languages => {}
);

print colored("\nCAPI OpenAPI Integration Testing\n", 'bold');
print "=" x 50 . "\n\n";

# Clean output directory if requested
if ($clean && -d $output_dir) {
    print "Cleaning output directory...\n";
    remove_tree($output_dir);
}

# Create output directory
make_path($output_dir) unless -d $output_dir;

# Test each language
my @languages = split /,/, $test_languages;
for my $language (@languages) {
    test_language($language);
}

# Print summary
print_summary();

sub test_language {
    my ($language) = @_;
    
    print colored("\nTesting $language SDK Generation\n", 'cyan');
    print "-" x 40 . "\n";
    
    $results{total}++;
    $results{languages}{$language} = {
        generation => 'pending',
        compilation => 'pending',
        basic_test => 'pending',
        live_test => 'pending',
        errors => []
    };
    
    my $lang_results = $results{languages}{$language};
    
    # Generate SDK
    my $sdk_dir = File::Spec->catfile($output_dir, $language);
    print "Generating $language SDK...\n" if $verbose;
    
    my $cmd = "$script_dir/gen --version=$version --language=$language --output=$sdk_dir";
    $cmd .= " --generator=openapi-generator" if $language ne 'go';  # Use oapi-codegen for Go
    
    my $output = `$cmd 2>&1`;
    my $exit_code = $? >> 8;
    
    if ($exit_code == 0) {
        print colored("  ✓ SDK generated successfully\n", 'green');
        $lang_results->{generation} = 'passed';
        
        # Test compilation/setup for each language
        if ($language eq 'go') {
            test_go_sdk($sdk_dir, $lang_results);
        } elsif ($language eq 'python') {
            test_python_sdk($sdk_dir, $lang_results);
        } elsif ($language eq 'java') {
            test_java_sdk($sdk_dir, $lang_results);
        } elsif ($language eq 'typescript-node') {
            test_typescript_sdk($sdk_dir, $lang_results);
        } elsif ($language eq 'ruby') {
            test_ruby_sdk($sdk_dir, $lang_results);
        } else {
            print colored("  ! No tests implemented for $language\n", 'yellow');
            $lang_results->{compilation} = 'skipped';
            $lang_results->{basic_test} = 'skipped';
        }
        
        # Live API test if credentials provided
        if ($test_api_url && $test_token && $lang_results->{compilation} eq 'passed') {
            test_live_api($language, $sdk_dir, $lang_results);
        } else {
            $lang_results->{live_test} = 'skipped';
        }
        
    } else {
        print colored("  ✗ SDK generation failed\n", 'red');
        $lang_results->{generation} = 'failed';
        push @{$lang_results->{errors}}, "Generation failed: $output" if $verbose;
        $results{failed}++;
        return;
    }
    
    # Update results
    if ($lang_results->{generation} eq 'passed' && 
        ($lang_results->{compilation} eq 'passed' || $lang_results->{compilation} eq 'skipped')) {
        $results{passed}++;
    } else {
        $results{failed}++;
    }
}

sub test_go_sdk {
    my ($sdk_dir, $lang_results) = @_;
    
    print "  Testing Go SDK compilation...\n" if $verbose;
    
    # Create go.mod if it doesn't exist
    unless (-f "$sdk_dir/go.mod") {
        my $go_mod = <<'EOF';
module capiclient

go 1.19

require (
    github.com/deepmap/oapi-codegen v1.12.4
    github.com/google/uuid v1.3.0
)
EOF
        write_file("$sdk_dir/go.mod", $go_mod);
    }
    
    # Try to compile
    my $output = `cd $sdk_dir && go build . 2>&1`;
    my $exit_code = $? >> 8;
    
    if ($exit_code == 0) {
        print colored("  ✓ Go SDK compiles successfully\n", 'green');
        $lang_results->{compilation} = 'passed';
        
        # Create basic test
        create_go_test($sdk_dir, $lang_results);
    } else {
        print colored("  ✗ Go SDK compilation failed\n", 'red');
        $lang_results->{compilation} = 'failed';
        push @{$lang_results->{errors}}, "Compilation failed: $output" if $verbose;
    }
}

sub create_go_test {
    my ($sdk_dir, $lang_results) = @_;
    
    my $test_file = <<'EOF';
package capiclient

import (
    "context"
    "testing"
)

func TestClientCreation(t *testing.T) {
    // Test creating a client
    server := "https://api.example.com"
    _ = server
    
    // Just test that the types exist and compile
    t.Log("Client types compile successfully")
}

func TestEndpointTypes(t *testing.T) {
    // Test that we can reference the generated types
    ctx := context.Background()
    _ = ctx
    
    // This tests that the generated code compiles
    t.Log("Generated endpoint methods compile successfully")
}
EOF

    write_file("$sdk_dir/client_test.go", $test_file);
    
    # Run test
    my $output = `cd $sdk_dir && go test -v 2>&1`;
    my $exit_code = $? >> 8;
    
    # The test will fail due to network, but if it compiles, that's success
    if ($output =~ /TestClientCreation|FAIL.*TestClientCreation/) {
        print colored("  ✓ Go SDK basic test compiles\n", 'green');
        $lang_results->{basic_test} = 'passed';
    } else {
        print colored("  ✗ Go SDK basic test failed\n", 'red');
        $lang_results->{basic_test} = 'failed';
        push @{$lang_results->{errors}}, "Test failed: $output" if $verbose;
    }
}

sub test_python_sdk {
    my ($sdk_dir, $lang_results) = @_;
    
    print "  Testing Python SDK...\n" if $verbose;
    
    # Check if setup.py exists
    if (-f "$sdk_dir/setup.py") {
        # Try to run setup.py check
        my $output = `cd $sdk_dir && python setup.py check 2>&1`;
        my $exit_code = $? >> 8;
        
        if ($exit_code == 0) {
            print colored("  ✓ Python SDK setup.py valid\n", 'green');
            $lang_results->{compilation} = 'passed';
            
            # Create basic test
            create_python_test($sdk_dir, $lang_results);
        } else {
            print colored("  ✗ Python SDK setup.py check failed\n", 'red');
            $lang_results->{compilation} = 'failed';
            push @{$lang_results->{errors}}, "Setup check failed: $output" if $verbose;
        }
    } else {
        print colored("  ! Python SDK has no setup.py\n", 'yellow');
        $lang_results->{compilation} = 'skipped';
        $lang_results->{basic_test} = 'skipped';
    }
}

sub create_python_test {
    my ($sdk_dir, $lang_results) = @_;
    
    my $test_file = <<'EOF';
#!/usr/bin/env python3

import sys
import os
sys.path.insert(0, os.path.dirname(__file__))

try:
    # Try to import the generated client
    import openapi_client
    from openapi_client.api import default_api
    from openapi_client.model import v3_info import V3Info
    
    print("✓ Python imports successful")
    
    # Try to create a client
    configuration = openapi_client.Configuration(
        host = "https://api.example.com"
    )
    
    with openapi_client.ApiClient(configuration) as api_client:
        api_instance = default_api.DefaultApi(api_client)
        print("✓ Python client created successfully")
    
except ImportError as e:
    print(f"✗ Import error: {e}")
    sys.exit(1)
except Exception as e:
    print(f"✗ Error: {e}")
    sys.exit(1)
EOF

    write_file("$sdk_dir/test_basic.py", $test_file);
    
    # Run test
    my $output = `cd $sdk_dir && python test_basic.py 2>&1`;
    my $exit_code = $? >> 8;
    
    if ($exit_code == 0) {
        print colored("  ✓ Python SDK basic test passed\n", 'green');
        $lang_results->{basic_test} = 'passed';
    } else {
        print colored("  ✗ Python SDK basic test failed\n", 'red');
        $lang_results->{basic_test} = 'failed';
        push @{$lang_results->{errors}}, "Test failed: $output" if $verbose;
    }
}

sub test_java_sdk {
    my ($sdk_dir, $lang_results) = @_;
    
    print "  Testing Java SDK...\n" if $verbose;
    
    # Check for pom.xml or build.gradle
    if (-f "$sdk_dir/pom.xml") {
        # Maven project
        my $output = `cd $sdk_dir && mvn compile 2>&1`;
        my $exit_code = $? >> 8;
        
        if ($exit_code == 0) {
            print colored("  ✓ Java SDK compiles with Maven\n", 'green');
            $lang_results->{compilation} = 'passed';
            $lang_results->{basic_test} = 'skipped';  # Skip test for now
        } else {
            print colored("  ✗ Java SDK compilation failed\n", 'red');
            $lang_results->{compilation} = 'failed';
            push @{$lang_results->{errors}}, "Maven compile failed: $output" if $verbose;
        }
    } elsif (-f "$sdk_dir/build.gradle") {
        # Gradle project
        my $output = `cd $sdk_dir && gradle build 2>&1`;
        my $exit_code = $? >> 8;
        
        if ($exit_code == 0) {
            print colored("  ✓ Java SDK compiles with Gradle\n", 'green');
            $lang_results->{compilation} = 'passed';
            $lang_results->{basic_test} = 'skipped';
        } else {
            print colored("  ✗ Java SDK compilation failed\n", 'red');
            $lang_results->{compilation} = 'failed';
            push @{$lang_results->{errors}}, "Gradle build failed: $output" if $verbose;
        }
    } else {
        print colored("  ! Java SDK has no build file\n", 'yellow');
        $lang_results->{compilation} = 'skipped';
        $lang_results->{basic_test} = 'skipped';
    }
}

sub test_typescript_sdk {
    my ($sdk_dir, $lang_results) = @_;
    
    print "  Testing TypeScript SDK...\n" if $verbose;
    
    # Check for package.json
    if (-f "$sdk_dir/package.json") {
        # Install dependencies
        my $output = `cd $sdk_dir && npm install 2>&1`;
        my $exit_code = $? >> 8;
        
        if ($exit_code == 0) {
            # Try to compile TypeScript
            $output = `cd $sdk_dir && npx tsc --noEmit 2>&1`;
            $exit_code = $? >> 8;
            
            if ($exit_code == 0) {
                print colored("  ✓ TypeScript SDK compiles successfully\n", 'green');
                $lang_results->{compilation} = 'passed';
                create_typescript_test($sdk_dir, $lang_results);
            } else {
                print colored("  ✗ TypeScript SDK compilation failed\n", 'red');
                $lang_results->{compilation} = 'failed';
                push @{$lang_results->{errors}}, "TypeScript compile failed: $output" if $verbose;
            }
        } else {
            print colored("  ✗ npm install failed\n", 'red');
            $lang_results->{compilation} = 'failed';
            push @{$lang_results->{errors}}, "npm install failed: $output" if $verbose;
        }
    } else {
        print colored("  ! TypeScript SDK has no package.json\n", 'yellow');
        $lang_results->{compilation} = 'skipped';
        $lang_results->{basic_test} = 'skipped';
    }
}

sub create_typescript_test {
    my ($sdk_dir, $lang_results) = @_;
    
    my $test_file = <<'EOF';
import { DefaultApi, Configuration } from './index';

async function testClient() {
    try {
        const config = new Configuration({
            basePath: 'https://api.example.com'
        });
        
        const api = new DefaultApi(config);
        console.log('✓ TypeScript client created successfully');
        
        // Test would make actual API call, but for compilation test this is enough
        return true;
    } catch (error) {
        console.error('✗ Error:', error);
        return false;
    }
}

testClient();
EOF

    write_file("$sdk_dir/test-basic.ts", $test_file);
    
    # Compile and run test
    my $output = `cd $sdk_dir && npx tsc test-basic.ts 2>&1`;
    my $exit_code = $? >> 8;
    
    if ($exit_code == 0) {
        print colored("  ✓ TypeScript SDK basic test compiles\n", 'green');
        $lang_results->{basic_test} = 'passed';
    } else {
        print colored("  ✗ TypeScript SDK basic test failed\n", 'red');
        $lang_results->{basic_test} = 'failed';
        push @{$lang_results->{errors}}, "Test compile failed: $output" if $verbose;
    }
}

sub test_ruby_sdk {
    my ($sdk_dir, $lang_results) = @_;
    
    print "  Testing Ruby SDK...\n" if $verbose;
    
    # Check for gemspec
    my @gemspecs = glob("$sdk_dir/*.gemspec");
    if (@gemspecs) {
        # Try to build gem
        my $output = `cd $sdk_dir && gem build *.gemspec 2>&1`;
        my $exit_code = $? >> 8;
        
        if ($exit_code == 0) {
            print colored("  ✓ Ruby SDK gem builds successfully\n", 'green');
            $lang_results->{compilation} = 'passed';
            $lang_results->{basic_test} = 'skipped';
        } else {
            print colored("  ✗ Ruby SDK gem build failed\n", 'red');
            $lang_results->{compilation} = 'failed';
            push @{$lang_results->{errors}}, "Gem build failed: $output" if $verbose;
        }
    } else {
        print colored("  ! Ruby SDK has no gemspec\n", 'yellow');
        $lang_results->{compilation} = 'skipped';
        $lang_results->{basic_test} = 'skipped';
    }
}

sub test_live_api {
    my ($language, $sdk_dir, $lang_results) = @_;
    
    print "  Testing against live API...\n" if $verbose;
    
    # For now, mark as skipped - would implement actual API tests here
    $lang_results->{live_test} = 'skipped';
    print colored("  ! Live API tests not yet implemented for $language\n", 'yellow');
}

sub print_summary {
    print "\n" . "=" x 50 . "\n";
    print colored("Integration Test Summary\n", 'bold');
    print "=" x 50 . "\n\n";
    
    print "Languages Tested: $results{total}\n";
    print colored("Passed: $results{passed}\n", 'green') if $results{passed};
    print colored("Failed: $results{failed}\n", 'red') if $results{failed};
    
    print "\nDetailed Results:\n";
    for my $lang (sort keys %{$results{languages}}) {
        my $lang_results = $results{languages}{$lang};
        
        print "\n$lang:\n";
        for my $test (qw(generation compilation basic_test live_test)) {
            my $status = $lang_results->{$test};
            my $symbol = $status eq 'passed' ? '✓' : 
                        $status eq 'failed' ? '✗' : 
                        $status eq 'skipped' ? '-' : '?';
            my $color = $status eq 'passed' ? 'green' :
                       $status eq 'failed' ? 'red' :
                       $status eq 'skipped' ? 'yellow' : 'white';
            
            print "  " . colored("$symbol", $color) . " $test\n";
        }
        
        if ($verbose && @{$lang_results->{errors}}) {
            print "  Errors:\n";
            for my $error (@{$lang_results->{errors}}) {
                print "    - $error\n";
            }
        }
    }
    
    print "\nOutput Directory: $output_dir\n";
    
    if ($results{failed} == 0) {
        print colored("\n✓ All SDK generations successful!\n", 'green');
    }
    
    # Clean up generated SDKs unless --no-cleanup was specified
    unless ($no_cleanup) {
        print "\n" . colored("Cleaning up generated SDKs...", 'yellow') . "\n";
        for my $lang (sort keys %{$results{languages}}) {
            my $sdk_dir = File::Spec->catfile($output_dir, $lang);
            if (-d $sdk_dir) {
                remove_tree($sdk_dir);
                print "  Removed $lang SDK\n" if $verbose;
            }
        }
        print colored("✓ Cleanup complete\n", 'green');
    } else {
        print colored("\nSkipping cleanup (--no-cleanup specified)\n", 'yellow');
    }
    
    exit($results{failed} > 0 ? 1 : 0);
}