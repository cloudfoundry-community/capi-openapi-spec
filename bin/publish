#!/usr/bin/env bash

set -euo pipefail

# Default values
VERSION=""
DRY_RUN=false
FORCE=false

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
print_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Function to display usage
usage() {
    cat << EOF
Usage: $0 --version=VERSION [OPTIONS]

Publish CAPI OpenAPI Go client to GitHub

Options:
  --version=VERSION  CAPI version to publish (e.g., 3.195.0)
  --dry-run         Show what would be done without actually doing it
  --force           Force push even if tag already exists
  --help            Show this help message

Examples:
  $0 --version=3.195.0
  $0 --version=3.195.0 --dry-run
  $0 --version=3.195.0 --force
EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --version=*)
            VERSION="${1#*=}"
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --force)
            FORCE=true
            shift
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Validate required arguments
if [[ -z "$VERSION" ]]; then
    print_error "Version is required"
    usage
    exit 1
fi

# Validate version format
if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    print_error "Invalid version format. Expected format: X.Y.Z (e.g., 3.195.0)"
    exit 1
fi

# Extract major version for module path
MAJOR_VERSION=$(echo "$VERSION" | cut -d. -f1)
MODULE_SUFFIX=""
if [[ "$MAJOR_VERSION" -ge 2 ]]; then
    MODULE_SUFFIX="/v${MAJOR_VERSION}"
fi

# Set up paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
SDK_PATH="${PROJECT_ROOT}/sdk/${VERSION}/go/capiclient"
TEMP_DIR=$(mktemp -d)
PUBLISH_DIR="${TEMP_DIR}/capi-openapi-go-client"
TARGET_REPO="git@github.com:cloudfoundry-community/capi-openapi-go-client.git"
TAG="v${VERSION}"

# Cleanup function
cleanup() {
    if [[ -d "$TEMP_DIR" ]]; then
        rm -rf "$TEMP_DIR"
    fi
}
trap cleanup EXIT

print_info "Publishing CAPI OpenAPI Go client version ${VERSION}"

# Check if SDK exists
if [[ ! -d "$SDK_PATH" ]]; then
    print_error "SDK not found at ${SDK_PATH}"
    print_info "Please generate the SDK first: ./bin/gen --version=${VERSION} --language=go"
    exit 1
fi

# Check if client.go exists
if [[ ! -f "${SDK_PATH}/client.go" ]]; then
    print_error "client.go not found in ${SDK_PATH}"
    exit 1
fi

# Check if go.mod exists
if [[ ! -f "${SDK_PATH}/go.mod" ]]; then
    print_error "go.mod not found in ${SDK_PATH}"
    exit 1
fi

# Clone the target repository
print_info "Cloning target repository..."
if [[ "$DRY_RUN" == true ]]; then
    print_info "[DRY RUN] Would clone ${TARGET_REPO} to ${PUBLISH_DIR}"
else
    git clone "${TARGET_REPO}" "${PUBLISH_DIR}"
fi

cd "${PUBLISH_DIR}"

# Check if tag already exists
if git rev-parse "$TAG" >/dev/null 2>&1; then
    if [[ "$FORCE" == true ]]; then
        print_warn "Tag ${TAG} already exists. Force flag is set, will overwrite."
        if [[ "$DRY_RUN" == false ]]; then
            git tag -d "$TAG"
            git push origin --delete "$TAG" || true
        fi
    else
        print_error "Tag ${TAG} already exists. Use --force to overwrite."
        exit 1
    fi
fi

# Create capiclient directory in the target repo
CAPICLIENT_DIR="${PUBLISH_DIR}/capiclient"
if [[ "$DRY_RUN" == true ]]; then
    print_info "[DRY RUN] Would create directory ${CAPICLIENT_DIR}"
else
    mkdir -p "${CAPICLIENT_DIR}"
fi

# Copy generated files
print_info "Copying generated files..."
if [[ "$DRY_RUN" == true ]]; then
    print_info "[DRY RUN] Would copy ${SDK_PATH}/client.go to ${CAPICLIENT_DIR}/"
    print_info "[DRY RUN] Would copy ${SDK_PATH}/go.mod to ${CAPICLIENT_DIR}/"
else
    cp "${SDK_PATH}/client.go" "${CAPICLIENT_DIR}/"
    cp "${SDK_PATH}/go.mod" "${CAPICLIENT_DIR}/"
fi

# Create README.md
print_info "Creating README.md..."
if [[ "$DRY_RUN" == true ]]; then
    print_info "[DRY RUN] Would create README.md in ${PUBLISH_DIR}"
else
    cat > "${PUBLISH_DIR}/README.md" << EOF
# CAPI OpenAPI Go Client

This repository contains the auto-generated Go client for the Cloud Foundry CAPI (Cloud Controller API) v3.

## Version

This client is generated from CAPI version **${VERSION}**.

## Installation

\`\`\`bash
go get github.com/cloudfoundry-community/capi-openapi-go-client/capiclient${MODULE_SUFFIX}@${TAG}
\`\`\`

## Usage

\`\`\`go
package main

import (
    "context"
    "fmt"
    "net/http"
    
    "github.com/cloudfoundry-community/capi-openapi-go-client/capiclient${MODULE_SUFFIX}"
)

func main() {
    // Create a new client
    client, err := capiclient.NewClientWithResponses("https://api.example.com")
    if err != nil {
        panic(err)
    }
    
    // Use the client to interact with CAPI
    ctx := context.Background()
    
    // Example: List organizations
    resp, err := client.V3OrganizationsGetWithResponse(ctx, &capiclient.V3OrganizationsGetParams{})
    if err != nil {
        panic(err)
    }
    
    if resp.StatusCode() == http.StatusOK {
        fmt.Printf("Found %d organizations\n", len(*resp.JSON200.Resources))
    }
}
\`\`\`

## Authentication

The client supports various authentication methods. Here's an example using Bearer token authentication:

\`\`\`go
import (
    "context"
    "net/http"
)

// Create a custom HTTP client with authentication
httpClient := &http.Client{
    Transport: &authTransport{
        Token: "your-bearer-token",
        Base:  http.DefaultTransport,
    },
}

// Use the custom HTTP client
client, err := capiclient.NewClientWithResponses(
    "https://api.example.com",
    capiclient.WithHTTPClient(httpClient),
)
\`\`\`

Where \`authTransport\` is a custom RoundTripper that adds the Authorization header:

\`\`\`go
type authTransport struct {
    Token string
    Base  http.RoundTripper
}

func (t *authTransport) RoundTrip(req *http.Request) (*http.Response, error) {
    req.Header.Set("Authorization", "Bearer "+t.Token)
    return t.Base.RoundTrip(req)
}
\`\`\`

## Documentation

- [CAPI Documentation](https://v3-apidocs.cloudfoundry.org/version/${VERSION}/)
- [OpenAPI Specification Source](https://github.com/cloudfoundry-community/capi-openapi-spec)

## Generation

This client is automatically generated from the OpenAPI specification using [oapi-codegen](https://github.com/deepmap/oapi-codegen).

To regenerate this client:
1. Clone [capi-openapi-spec](https://github.com/cloudfoundry-community/capi-openapi-spec)
2. Run \`make gen-go-client VERSION=${VERSION}\`
3. Run \`./bin/publish --version=${VERSION}\`

## License

This project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.
EOF
fi

# Copy LICENSE file
print_info "Copying LICENSE file..."
if [[ -f "${PROJECT_ROOT}/LICENSE" ]]; then
    if [[ "$DRY_RUN" == true ]]; then
        print_info "[DRY RUN] Would copy ${PROJECT_ROOT}/LICENSE to ${PUBLISH_DIR}/"
    else
        cp "${PROJECT_ROOT}/LICENSE" "${PUBLISH_DIR}/"
    fi
else
    print_warn "LICENSE file not found in project root, using default Apache 2.0 license"
    if [[ "$DRY_RUN" == false ]]; then
        curl -s https://www.apache.org/licenses/LICENSE-2.0.txt > "${PUBLISH_DIR}/LICENSE"
    fi
fi

# Create root go.mod for the repository
print_info "Creating root go.mod..."
if [[ "$DRY_RUN" == true ]]; then
    print_info "[DRY RUN] Would create root go.mod"
else
    cat > "${PUBLISH_DIR}/go.mod" << EOF
module github.com/cloudfoundry-community/capi-openapi-go-client${MODULE_SUFFIX}

go 1.21
EOF
fi

# Create .gitignore
if [[ "$DRY_RUN" == true ]]; then
    print_info "[DRY RUN] Would create .gitignore"
else
    cat > "${PUBLISH_DIR}/.gitignore" << EOF
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with \`go test -c\`
*.test

# Output of the go coverage tool
*.out

# Go workspace file
go.work

# IDE
.idea/
.vscode/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db
EOF
fi

# Git operations
if [[ "$DRY_RUN" == true ]]; then
    print_info "[DRY RUN] Would add all files to git"
    print_info "[DRY RUN] Would commit with message: 'Release ${TAG} - CAPI OpenAPI Go Client'"
    print_info "[DRY RUN] Would create tag ${TAG}"
    print_info "[DRY RUN] Would push to origin main"
    print_info "[DRY RUN] Would push tag ${TAG}"
else
    print_info "Committing changes..."
    git add .
    git commit -m "Release ${TAG} - CAPI OpenAPI Go Client

Generated from CAPI version ${VERSION}
Source: https://github.com/cloudfoundry-community/capi-openapi-spec"
    
    print_info "Creating tag ${TAG}..."
    git tag -a "${TAG}" -m "Release ${TAG}"
    
    print_info "Pushing to GitHub..."
    git push origin main
    git push origin "${TAG}"
fi

print_info "Successfully published CAPI OpenAPI Go client ${TAG}!"
print_info "Users can now install with: go get github.com/cloudfoundry-community/capi-openapi-go-client/capiclient${MODULE_SUFFIX}@${TAG}"

if [[ "$DRY_RUN" == true ]]; then
    print_warn "This was a dry run. No changes were made."
fi