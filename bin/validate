#!/usr/bin/env perl

use v5.20;
use strict;
use warnings;
use File::Basename;
use File::Spec;
use Cwd qw(abs_path);
use Getopt::Long;

# Get project root directory (one level up from bin/)
my $script_dir = dirname(abs_path($0));
my $project_root = dirname($script_dir);

# Parse command line arguments
my $capi_version;
my $help;
my $verbose;

GetOptions(
    'version=s' => \$capi_version,
    'verbose' => \$verbose,
    'help' => \$help,
) or die usage();

# Show usage if help requested or missing required arguments
if ($help || !$capi_version) {
    print usage();
    exit($help ? 0 : 1);
}

# Validate inputs
validate_inputs();

# Validate the OpenAPI specification
validate_spec();

sub usage {
    return <<EOF;
Usage: $0 --version=VERSION [--verbose]

Validate CAPI OpenAPI specification

Required options:
  --version=VERSION   CAPI version to validate (e.g., 3.195.0)
  
Optional options:
  --verbose           Show detailed validation output
  --help              Show this help message

Examples:
  $0 --version=3.195.0
  $0 --version=3.181.0 --verbose
EOF
}

sub validate_inputs {
    # Check if spec file exists
    my $spec_file = File::Spec->catfile($project_root, 'capi', "${capi_version}.openapi.yml");
    unless (-f $spec_file) {
        die "Error: OpenAPI spec file not found: $spec_file\n" .
            "Please run 'make gen-openapi-spec' first to generate the specification.\n";
    }
    
    # Check if openapi-generator is available
    my $generator_check = `which openapi-generator 2>/dev/null || which openapi-generator-cli 2>/dev/null`;
    chomp $generator_check;
    unless ($generator_check) {
        die "Error: openapi-generator-cli not found.\n" .
            "Please run 'make deps' to install dependencies.\n";
    }
}

sub validate_spec {
    my $spec_file = File::Spec->catfile($project_root, 'capi', "${capi_version}.openapi.yml");
    
    # Determine which command to use (openapi-generator or openapi-generator-cli)
    my $generator_cmd = `which openapi-generator 2>/dev/null`;
    chomp $generator_cmd;
    $generator_cmd = 'openapi-generator-cli' unless $generator_cmd;
    
    # Build the validation command
    my $cmd = "$generator_cmd validate -i '$spec_file'";
    
    # Execute the validation
    say "Validating CAPI $capi_version OpenAPI specification...";
    say "Spec file: $spec_file" if $verbose;
    say "Command: $cmd" if $verbose;
    
    my $result = system($cmd);
    
    if ($result == 0) {
        say "\n✓ Validation passed!";
        say "  The OpenAPI specification is valid.";
        
        # Check if there were warnings in the output
        my $output = `$cmd 2>&1`;
        if ($output =~ /Warning/) {
            say "\n⚠ Note: There are some warnings (usually about unused models).";
            say "  These are typically not critical issues.";
        }
        
        # Also check JSON version if verbose
        check_json_spec() if $verbose;
        
    } else {
        say "\n✗ Validation failed!";
        say "  Please check the errors above and fix the specification.";
        exit(1);
    }
}

sub check_json_spec {
    my $json_file = File::Spec->catfile($project_root, 'capi', "${capi_version}.openapi.json");
    
    if (-f $json_file) {
        say "\nAlso validating JSON format...";
        
        # Determine which command to use
        my $generator_cmd = `which openapi-generator 2>/dev/null`;
        chomp $generator_cmd;
        $generator_cmd = 'openapi-generator-cli' unless $generator_cmd;
        
        my $json_cmd = "$generator_cmd validate -i '$json_file'";
        say "Command: $json_cmd" if $verbose;
        
        my $result = system($json_cmd);
        
        if ($result == 0) {
            say "✓ JSON specification is valid.";
        } else {
            say "✗ JSON specification validation failed.";
        }
    }
}