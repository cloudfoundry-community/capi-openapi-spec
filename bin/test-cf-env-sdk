#!/usr/bin/env perl

use strict;
use warnings;
use v5.20;
use JSON::XS;
use File::Slurp;
use Term::ANSIColor qw(colored);
use Getopt::Long;
use File::Temp qw(tempdir);

# Command line options
my $cf_config = '~/cf/config.json';
my $app_name;
my $app_guid;
my $sdk_language = 'go';
my $verbose = 0;
my $show_all = 0;

GetOptions(
    'cf-config=s' => \$cf_config,
    'app=s' => \$app_name,
    'guid=s' => \$app_guid,
    'sdk=s' => \$sdk_language,
    'verbose' => \$verbose,
    'all' => \$show_all,
) or die usage();

sub usage {
    return <<EOF;
Usage: $0 [options]

Options:
  --cf-config=FILE   CF config file (default: ~/cf/config.json)
  --app=NAME         Application name
  --guid=GUID        Application GUID (if known)
  --sdk=LANGUAGE     SDK language to use (go, python)
  --verbose          Show detailed output
  --all              Show all environment details

This script displays the application environment using OpenAPI-generated SDKs.
It validates that SDKs can properly retrieve and display environment information.

Examples:
  $0 --app=myapp                    # Get environment using Go SDK
  $0 --app=myapp --sdk=python       # Get environment using Python SDK
  $0 --guid=abc-123-def --all       # Show all details for app by GUID
EOF
}

# Load CF config
my $cf_config_data = decode_json(read_file($cf_config));
my $api_url = $cf_config_data->{Target};
my $access_token = $cf_config_data->{AccessToken};
my $current_space = $cf_config_data->{SpaceFields}{GUID};

# Remove 'bearer ' prefix if present
$access_token =~ s/^bearer\s+//i;

die "Either --app or --guid must be specified\n" unless $app_name || $app_guid;

print colored("\nCloud Foundry Application Environment (SDK)\n", 'bold');
print "=" x 60 . "\n";
print "Using SDK: $sdk_language\n";
print "=" x 60 . "\n";

# Generate SDK if needed
generate_sdk_if_needed();

# Run SDK-specific test
if ($sdk_language eq 'go') {
    run_go_env_test();
} elsif ($sdk_language eq 'python') {
    run_python_env_test();
} else {
    die "Unsupported SDK language: $sdk_language\n";
}

sub generate_sdk_if_needed {
    my $sdk_dir = "sdk/3.195.0/$sdk_language";
    
    unless (-d $sdk_dir) {
        print "Generating $sdk_language SDK...\n";
        system("./bin/gen --version=3.195.0 --language=$sdk_language");
        die "Failed to generate SDK\n" unless -d $sdk_dir;
    }
}

sub run_go_env_test {
    # Create Go test program
    my $test_dir = tempdir(CLEANUP => 1);
    my $test_file = "$test_dir/cfenv_test.go";
    
    my $go_test = <<'GO_TEST';
package main

import (
    "context"
    "encoding/json"
    "fmt"
    "log"
    "net/http"
    "os"
    "strings"
    
    capiclient "github.com/cloudfoundry-community/capi-openapi-go-client/capiclient/v3"
)

type EnvResult struct {
    App               interface{} `json:"app"`
    Environment       interface{} `json:"environment"`
    EnvironmentVars   interface{} `json:"environment_vars"`
    SystemEnv         interface{} `json:"system_env"`
    ApplicationEnv    interface{} `json:"application_env"`
    RunningEnv        interface{} `json:"running_env"`
    StagingEnv        interface{} `json:"staging_env"`
    Processes         interface{} `json:"processes"`
    Routes            interface{} `json:"routes"`
}

func main() {
    apiURL := os.Getenv("CF_API_URL")
    token := os.Getenv("CF_ACCESS_TOKEN")
    appName := os.Getenv("APP_NAME")
    appGUID := os.Getenv("APP_GUID")
    spaceGUID := os.Getenv("SPACE_GUID")
    showAll := os.Getenv("SHOW_ALL") == "true"
    
    // Create client
    client, err := capiclient.NewClient(apiURL, capiclient.WithRequestEditorFn(func(ctx context.Context, req *http.Request) error {
        req.Header.Set("Authorization", "bearer " + token)
        return nil
    }))
    if err != nil {
        log.Fatal("Failed to create client:", err)
    }
    
    ctx := context.Background()
    
    // Get app GUID if only name provided
    if appName != "" && appGUID == "" {
        params := &capiclient.ListAppsParams{
            Names: &[]string{appName},
        }
        if spaceGUID != "" {
            params.SpaceGuids = &[]string{spaceGUID}
        }
        
        resp, err := client.ListApps(ctx, params)
        if err != nil {
            log.Fatal("Failed to find app:", err)
        }
        
        var appList capiclient.V3AppList
        json.NewDecoder(resp.Body).Decode(&appList)
        
        if appList.Resources != nil && len(*appList.Resources) > 0 {
            apps := *appList.Resources
            appGUID = *apps[0].Guid
        } else {
            log.Fatal("Application not found")
        }
    }
    
    result := EnvResult{}
    
    // Get app details
    appResp, err := client.GetApp(ctx, appGUID)
    if err == nil {
        var app capiclient.V3App
        json.NewDecoder(appResp.Body).Decode(&app)
        result.App = app
    }
    
    // Get environment variables
    envVarsResp, err := client.GetAppEnvironmentVariables(ctx, appGUID)
    if err == nil {
        var envVars map[string]interface{}
        json.NewDecoder(envVarsResp.Body).Decode(&envVars)
        result.EnvironmentVars = envVars
    }
    
    // Get full environment
    envResp, err := client.GetAppEnv(ctx, appGUID)
    if err == nil {
        var env capiclient.V3AppEnv
        json.NewDecoder(envResp.Body).Decode(&env)
        result.Environment = env
        
        if env.SystemEnvJson != nil {
            result.SystemEnv = env.SystemEnvJson
            
            // Extract VCAP_APPLICATION and VCAP_SERVICES
            if vcapApp, ok := (*env.SystemEnvJson)["VCAP_APPLICATION"]; ok {
                result.ApplicationEnv = vcapApp
            }
        }
        
        if showAll {
            if env.EnvironmentJson != nil {
                result.RunningEnv = env.EnvironmentJson
            }
            if env.StagingEnvJson != nil {
                result.StagingEnv = env.StagingEnvJson
            }
        }
    }
    
    // Get processes
    processResp, err := client.ListAppProcesses(ctx, appGUID, nil)
    if err == nil {
        var processes capiclient.V3ProcessList
        json.NewDecoder(processResp.Body).Decode(&processes)
        result.Processes = processes
    }
    
    // Get routes
    routesResp, err := client.ListAppRoutes(ctx, appGUID, nil)
    if err == nil {
        var routes capiclient.V3RouteList
        json.NewDecoder(routesResp.Body).Decode(&routes)
        result.Routes = routes
    }
    
    // Output result as JSON
    output, _ := json.Marshal(result)
    fmt.Println(string(output))
}
GO_TEST

    write_file($test_file, $go_test);
    
    # Create go.mod
    my $go_mod = <<'GO_MOD';
module cfenv-test

go 1.19

require github.com/cloudfoundry-community/capi-openapi-go-client/capiclient/v3 v3.0.0

replace github.com/cloudfoundry-community/capi-openapi-go-client/capiclient/v3 => ../../../sdk/3.195.0/go
GO_MOD
    
    write_file("$test_dir/go.mod", $go_mod);
    
    # Set environment variables
    $ENV{CF_API_URL} = $api_url;
    $ENV{CF_ACCESS_TOKEN} = $access_token;
    $ENV{APP_NAME} = $app_name || '';
    $ENV{APP_GUID} = $app_guid || '';
    $ENV{SPACE_GUID} = $current_space;
    $ENV{SHOW_ALL} = $show_all ? 'true' : 'false';
    
    # Run the test
    my $output = `cd $test_dir && go mod tidy && go run cfenv_test.go 2>&1`;
    
    if ($? == 0) {
        # Parse and display results
        my $result = eval { decode_json($output) };
        if ($result) {
            display_env_results($result);
        } else {
            print "Failed to parse output:\n$output\n";
        }
    } else {
        print colored("SDK test failed:\n", 'red');
        print $output;
    }
}

sub run_python_env_test {
    # Create Python test program
    my $test_dir = tempdir(CLEANUP => 1);
    my $test_file = "$test_dir/cfenv_test.py";
    
    my $python_test = <<'PYTHON_TEST';
#!/usr/bin/env python3

import os
import sys
import json

# Add SDK to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../sdk/3.195.0/python'))

import capi_client
from capi_client.api import apps_api

def main():
    api_url = os.environ['CF_API_URL']
    token = os.environ['CF_ACCESS_TOKEN']
    app_name = os.environ.get('APP_NAME', '')
    app_guid = os.environ.get('APP_GUID', '')
    space_guid = os.environ.get('SPACE_GUID', '')
    show_all = os.environ.get('SHOW_ALL', 'false') == 'true'
    
    # Configure client
    configuration = capi_client.Configuration(host=api_url)
    configuration.access_token = token
    
    result = {}
    
    with capi_client.ApiClient(configuration) as api_client:
        api = apps_api.AppsApi(api_client)
        
        # Get app GUID if only name provided
        if app_name and not app_guid:
            apps = api.list_apps(names=[app_name], space_guids=[space_guid] if space_guid else None)
            if apps.resources:
                app_guid = apps.resources[0].guid
            else:
                print("Application not found", file=sys.stderr)
                sys.exit(1)
        
        # Get app details
        try:
            app = api.get_app(app_guid)
            result['app'] = app.to_dict()
        except:
            pass
        
        # Get environment variables
        try:
            env_vars = api.get_app_environment_variables(app_guid)
            result['environment_vars'] = env_vars
        except:
            pass
        
        # Get full environment
        try:
            env = api.get_app_env(app_guid)
            result['environment'] = env.to_dict()
            
            if hasattr(env, 'system_env_json'):
                result['system_env'] = env.system_env_json
                if 'VCAP_APPLICATION' in env.system_env_json:
                    result['application_env'] = env.system_env_json['VCAP_APPLICATION']
            
            if show_all:
                if hasattr(env, 'environment_json'):
                    result['running_env'] = env.environment_json
                if hasattr(env, 'staging_env_json'):
                    result['staging_env'] = env.staging_env_json
        except:
            pass
        
        # Get processes
        try:
            processes = api.list_app_processes(app_guid)
            result['processes'] = [p.to_dict() for p in processes.resources]
        except:
            pass
        
        # Get routes
        try:
            routes = api.list_app_routes(app_guid)
            result['routes'] = [r.to_dict() for r in routes.resources]
        except:
            pass
    
    print(json.dumps(result))

if __name__ == "__main__":
    main()
PYTHON_TEST
    
    write_file($test_file, $python_test);
    system("chmod +x $test_file");
    
    # Set environment variables
    $ENV{CF_API_URL} = $api_url;
    $ENV{CF_ACCESS_TOKEN} = $access_token;
    $ENV{APP_NAME} = $app_name || '';
    $ENV{APP_GUID} = $app_guid || '';
    $ENV{SPACE_GUID} = $current_space;
    $ENV{SHOW_ALL} = $show_all ? 'true' : 'false';
    
    # Run the test
    my $output = `cd $test_dir && python3 cfenv_test.py 2>&1`;
    
    if ($? == 0) {
        # Parse and display results
        my $result = eval { decode_json($output) };
        if ($result) {
            display_env_results($result);
        } else {
            print "Failed to parse output:\n$output\n";
        }
    } else {
        print colored("SDK test failed:\n", 'red');
        print $output;
    }
}

sub display_env_results {
    my ($result) = @_;
    
    # Display header
    if ($result->{app}) {
        my $app = $result->{app};
        print colored("\nShowing environment for app ", 'bold');
        print colored($app->{name}, 'green');
        print colored(" (SDK: $sdk_language)\n\n", 'bold');
    }
    
    # User-Provided Environment Variables
    if ($result->{environment_vars} && $result->{environment_vars}{var}) {
        my $user_env = $result->{environment_vars}{var};
        
        if (keys %$user_env) {
            print colored("User-Provided:\n", 'cyan');
            for my $key (sort keys %$user_env) {
                print colored($key, 'yellow') . ": ";
                print colored("\"$user_env->{$key}\"", 'green') . "\n";
            }
            print "\n";
        }
    }
    
    # System Environment
    if ($result->{system_env}) {
        print colored("System-Provided:\n", 'cyan');
        
        # VCAP_APPLICATION
        if ($result->{application_env} || $result->{system_env}{VCAP_APPLICATION}) {
            my $vcap = $result->{application_env} || $result->{system_env}{VCAP_APPLICATION};
            print colored("VCAP_APPLICATION", 'yellow') . ": ";
            
            if ($show_all || $verbose) {
                print "\n";
                print_json($vcap, "  ");
            } else {
                print "{\n";
                print "  application_id: " . colored("\"$vcap->{application_id}\"", 'green') . "\n" if $vcap->{application_id};
                print "  application_name: " . colored("\"$vcap->{application_name}\"", 'green') . "\n" if $vcap->{application_name};
                if ($vcap->{application_uris} && ref($vcap->{application_uris}) eq 'ARRAY') {
                    print "  application_uris: [" . join(", ", map { colored("\"$_\"", 'green') } @{$vcap->{application_uris}}) . "]\n";
                }
                print "  space_name: " . colored("\"$vcap->{space_name}\"", 'green') . "\n" if $vcap->{space_name};
                print "}\n";
            }
            print "\n";
        }
        
        # VCAP_SERVICES
        if ($result->{system_env}{VCAP_SERVICES} && keys %{$result->{system_env}{VCAP_SERVICES}}) {
            print colored("VCAP_SERVICES", 'yellow') . ": ";
            print_json($result->{system_env}{VCAP_SERVICES}, "  ");
            print "\n";
        }
    }
    
    # Application details
    if ($result->{app}) {
        my $app = $result->{app};
        print colored("Application Details:\n", 'cyan');
        print "  State: " . colored($app->{state}, $app->{state} eq 'STARTED' ? 'green' : 'yellow') . "\n";
        print "  Created: $app->{created_at}\n" if $app->{created_at};
        print "  Updated: $app->{updated_at}\n" if $app->{updated_at};
    }
    
    # Process info
    if ($result->{processes} && ref($result->{processes}) eq 'ARRAY' && @{$result->{processes}}) {
        my $web = $result->{processes}[0];
        print "  Instances: $web->{instances}\n" if defined $web->{instances};
        print "  Memory: $web->{memory_in_mb}M\n" if $web->{memory_in_mb};
        print "  Disk: $web->{disk_in_mb}M\n" if $web->{disk_in_mb};
    }
    
    # Routes
    if ($result->{routes} && ref($result->{routes}) eq 'ARRAY' && @{$result->{routes}}) {
        print "  Routes:\n";
        for my $route (@{$result->{routes}}) {
            print "    - $route->{url}\n" if $route->{url};
        }
    }
    
    print "\n";
    print colored("✓ SDK successfully retrieved environment information\n", 'green');
}

sub print_json {
    my ($obj, $indent) = @_;
    $indent ||= "";
    
    my $json = JSON::XS->new->pretty->canonical;
    my $output = $json->encode($obj);
    
    # Add indentation
    $output =~ s/^/$indent/gm;
    
    # Remove first newline
    $output =~ s/^\n//;
    
    print $output;
}