#!/usr/bin/env perl

use strict;
use warnings;
use v5.20;
use JSON::XS;
use File::Slurp;
use Getopt::Long;
use Data::Dumper;

# Parse command line options
my $input_file;
my $output_file;
my $verbose;
my $help;

GetOptions(
    'input=s' => \$input_file,
    'output=s' => \$output_file,
    'verbose' => \$verbose,
    'help' => \$help,
) or die "Error in command line arguments\n";

if ($help || !$input_file) {
    print <<EOF;
Usage: fix-oapi-codegen-issues --input=FILE [--output=FILE] [--verbose]

Fix OpenAPI spec issues that prevent oapi-codegen from working:
- Deduplicate parameters with same name
- Fix parameter references
- Remove problematic constructs

Options:
  --input=FILE    Input OpenAPI spec file (required)
  --output=FILE   Output file (default: overwrites input)
  --verbose       Show detailed progress
  --help          Show this help

Example:
  fix-oapi-codegen-issues --input=capi/3.195.0/openapi.json
EOF
    exit($help ? 0 : 1);
}

# Default output to input if not specified
$output_file //= $input_file;

# Read the spec
say "Reading spec from: $input_file" if $verbose;
my $content = read_file($input_file);
my $spec = decode_json($content);

# Statistics
my $fixes = {
    duplicate_params => 0,
    parameter_refs => 0,
    conflicting_params => 0,
    merged_params => 0,
};

# Fix the spec
say "Fixing oapi-codegen compatibility issues..." if $verbose;
fix_duplicate_parameters($spec);
fix_parameter_references($spec);
merge_path_and_operation_params($spec);

# Write the fixed spec
say "Writing fixed spec to: $output_file" if $verbose;
write_file($output_file, encode_json($spec));

# Report statistics
if ($verbose) {
    say "\nFixes applied:";
    for my $type (sort keys %$fixes) {
        say "  $type: $fixes->{$type}" if $fixes->{$type} > 0;
    }
}

say "Successfully fixed oapi-codegen compatibility issues" if $verbose;

sub fix_duplicate_parameters {
    my ($spec) = @_;
    
    return unless $spec->{paths};
    
    for my $path (keys %{$spec->{paths}}) {
        my $path_obj = $spec->{paths}{$path};
        
        # Process each operation
        for my $method (qw(get post put patch delete head options)) {
            next unless $path_obj->{$method};
            
            my $operation = $path_obj->{$method};
            next unless $operation->{parameters};
            
            # Deduplicate parameters by name and location
            my %seen;
            my @unique_params;
            
            for my $param (@{$operation->{parameters}}) {
                # Skip if it's a reference
                if ($param->{'$ref'}) {
                    push @unique_params, $param;
                    next;
                }
                
                my $key = ($param->{in} || 'query') . ':' . ($param->{name} || '');
                
                if ($seen{$key}) {
                    $fixes->{duplicate_params}++;
                    say "  Removing duplicate parameter: $key in $method $path" if $verbose;
                    
                    # Merge properties from duplicate into the first occurrence
                    my $existing = $seen{$key};
                    for my $prop (qw(description example schema required)) {
                        if ($param->{$prop} && !$existing->{$prop}) {
                            $existing->{$prop} = $param->{$prop};
                        }
                    }
                } else {
                    $seen{$key} = $param;
                    push @unique_params, $param;
                }
            }
            
            $operation->{parameters} = \@unique_params;
        }
    }
}

sub fix_parameter_references {
    my ($spec) = @_;
    
    return unless $spec->{paths};
    
    # Create a map of all component parameters
    my %component_params;
    if ($spec->{components}{parameters}) {
        for my $name (keys %{$spec->{components}{parameters}}) {
            my $param = $spec->{components}{parameters}{$name};
            my $key = ($param->{in} || 'query') . ':' . ($param->{name} || $name);
            $component_params{$name} = $key;
        }
    }
    
    for my $path (keys %{$spec->{paths}}) {
        my $path_obj = $spec->{paths}{$path};
        
        # Process path-level parameters
        if ($path_obj->{parameters}) {
            $path_obj->{parameters} = fix_param_array($path_obj->{parameters}, \%component_params);
        }
        
        # Process each operation
        for my $method (qw(get post put patch delete head options)) {
            next unless $path_obj->{$method};
            
            my $operation = $path_obj->{$method};
            next unless $operation->{parameters};
            
            $operation->{parameters} = fix_param_array($operation->{parameters}, \%component_params);
        }
    }
}

sub fix_param_array {
    my ($params, $component_map) = @_;
    
    my %seen;
    my @fixed_params;
    
    for my $param (@$params) {
        if ($param->{'$ref'}) {
            # Extract parameter name from ref
            my $ref_name = $param->{'$ref'};
            $ref_name =~ s|^#/components/parameters/||;
            
            my $key = $component_map->{$ref_name} || "unknown:$ref_name";
            
            if ($seen{$key}) {
                $fixes->{parameter_refs}++;
                next; # Skip duplicate reference
            }
            
            $seen{$key} = 1;
        } else {
            my $key = ($param->{in} || 'query') . ':' . ($param->{name} || '');
            
            if ($seen{$key}) {
                $fixes->{duplicate_params}++;
                next;
            }
            
            $seen{$key} = 1;
        }
        
        push @fixed_params, $param;
    }
    
    return \@fixed_params;
}

sub merge_path_and_operation_params {
    my ($spec) = @_;
    
    return unless $spec->{paths};
    
    for my $path (keys %{$spec->{paths}}) {
        my $path_obj = $spec->{paths}{$path};
        
        # Get path-level parameters
        my @path_params = $path_obj->{parameters} ? @{$path_obj->{parameters}} : ();
        
        # Process each operation
        for my $method (qw(get post put patch delete head options)) {
            next unless $path_obj->{$method};
            
            my $operation = $path_obj->{$method};
            
            # Merge path parameters with operation parameters
            my @op_params = $operation->{parameters} ? @{$operation->{parameters}} : ();
            
            if (@path_params && @op_params) {
                # Create a map of operation parameters
                my %op_param_map;
                for my $param (@op_params) {
                    if ($param->{'$ref'}) {
                        my $ref = $param->{'$ref'};
                        $ref =~ s|^#/components/parameters/||;
                        $op_param_map{"ref:$ref"} = 1;
                    } else {
                        my $key = ($param->{in} || 'query') . ':' . ($param->{name} || '');
                        $op_param_map{$key} = 1;
                    }
                }
                
                # Add path parameters that don't conflict
                for my $path_param (@path_params) {
                    my $should_add = 1;
                    
                    if ($path_param->{'$ref'}) {
                        my $ref = $path_param->{'$ref'};
                        $ref =~ s|^#/components/parameters/||;
                        $should_add = 0 if $op_param_map{"ref:$ref"};
                    } else {
                        my $key = ($path_param->{in} || 'query') . ':' . ($path_param->{name} || '');
                        $should_add = 0 if $op_param_map{$key};
                    }
                    
                    if ($should_add) {
                        push @op_params, $path_param;
                        $fixes->{merged_params}++;
                    } else {
                        $fixes->{conflicting_params}++;
                    }
                }
                
                $operation->{parameters} = \@op_params if @op_params;
            } elsif (@path_params && !@op_params) {
                # Copy path parameters to operation
                $operation->{parameters} = \@path_params;
                $fixes->{merged_params} += scalar(@path_params);
            }
        }
        
        # Remove path-level parameters after merging
        delete $path_obj->{parameters};
    }
}