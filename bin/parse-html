#!/usr/bin/env perl

use v5.20;
use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/lib";
use File::Slurp qw(read_file write_file);
use YAML::XS qw(Dump);
use JSON::XS;
use Getopt::Long;
use CAPI::HTMLParser;
use CAPI::EdgeCaseHandler;

# Parse command line options
my $input_file;
my $output_file;
my $format = 'yaml';
my $help;

GetOptions(
    'input=s' => \$input_file,
    'output=s' => \$output_file,
    'format=s' => \$format,
    'help' => \$help,
) or die usage();

if ($help || !$input_file) {
    print usage();
    exit($help ? 0 : 1);
}

sub usage {
    return <<'EOF';
Usage: parse-html --input=FILE [OPTIONS]

Parse CAPI HTML documentation and extract OpenAPI structure

Options:
  --input=FILE      Input HTML file to parse (required)
  --output=FILE     Output file (default: stdout)
  --format=FORMAT   Output format: yaml or json (default: yaml)
  --help            Show this help message

Example:
  parse-html --input=specs/capi/3.195.0.html --output=parsed.yaml
EOF
}

# Read HTML file
my $html_content = read_file($input_file, { binmode => ':utf8' });

# Parse HTML
say "Parsing HTML file: $input_file";
my $parser = CAPI::HTMLParser->new($html_content);
my $parsed_data = $parser->parse();

# Apply edge case handlers
my $edge_handler = CAPI::EdgeCaseHandler->new();
$edge_handler->apply_edge_cases($parsed_data->{endpoints}, $parsed_data->{components});

# Generate OpenAPI structure
my $openapi = {
    openapi => '3.0.3',
    info => {
        title => 'Cloud Foundry CAPI',
        version => '3.195.0',
        description => 'Cloud Controller API for Cloud Foundry',
        contact => {
            name => 'Cloud Foundry',
            url => 'https://www.cloudfoundry.org/'
        }
    },
    servers => [
        {
            url => 'https://api.example.org',
            description => 'Cloud Foundry API Server'
        }
    ],
    tags => generate_tags($parsed_data->{endpoints}),
    paths => generate_paths($parsed_data->{endpoints}),
    components => {
        %{$parsed_data->{components}},
        securitySchemes => {
            bearerAuth => {
                type => 'http',
                scheme => 'bearer'
            }
        }
    }
};

# Output result
my $output;
if ($format eq 'json') {
    my $json = JSON::XS->new->pretty->canonical;
    $output = $json->encode($openapi);
} else {
    $output = Dump($openapi);
}

if ($output_file) {
    write_file($output_file, { binmode => ':utf8' }, $output);
    say "Wrote output to: $output_file";
} else {
    print $output;
}

# Helper functions
sub generate_tags {
    my $endpoints = shift;
    my %tags;
    
    for my $endpoint (@$endpoints) {
        for my $tag (@{$endpoint->{tags}}) {
            $tags{$tag} = 1;
        }
    }
    
    return [
        map { { name => $_, description => "$_ operations" } }
        sort keys %tags
    ];
}

sub generate_paths {
    my $endpoints = shift;
    my %paths;
    
    for my $endpoint (@$endpoints) {
        my $path = $endpoint->{path};
        my $method = $endpoint->{method};
        
        $paths{$path} ||= {};
        
        my $operation = {
            summary => $endpoint->{summary},
            description => $endpoint->{description},
            operationId => generate_operation_id($method, $path),
            tags => $endpoint->{tags},
            parameters => $endpoint->{parameters},
            responses => $endpoint->{responses}
        };
        
        # Add request body if present
        if ($endpoint->{requestBody}) {
            $operation->{requestBody} = $endpoint->{requestBody};
        }
        
        # Add security if present
        if (@{$endpoint->{security}}) {
            $operation->{security} = $endpoint->{security};
        }
        
        # Add custom extensions
        if ($endpoint->{'x-required-roles'}) {
            $operation->{'x-required-roles'} = $endpoint->{'x-required-roles'};
        }
        
        $paths{$path}{$method} = $operation;
    }
    
    return \%paths;
}

sub generate_operation_id {
    my ($method, $path) = @_;
    
    # Convert path to operation ID
    my $op_id = $path;
    $op_id =~ s{^/v3/}{};
    $op_id =~ s{/}{_}g;
    $op_id =~ s/{([^}]+)}/by_$1/g;
    
    return $method . '_' . $op_id;
}