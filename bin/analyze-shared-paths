#!/usr/bin/env perl

use v5.20;
use strict;
use warnings;
use YAML::XS qw(LoadFile);
use Data::Dumper;

my $file = shift || 'test-parse.yaml';
my $spec = LoadFile($file);

my $paths = $spec->{paths};
my @shared_paths;
my @polymorphic_endpoints;

for my $path (sort keys %$paths) {
    my $methods = $paths->{$path};
    my @method_names = keys %$methods;
    
    # Check for multiple methods on same path
    if (@method_names > 1) {
        push @shared_paths, {
            path => $path,
            methods => \@method_names
        };
    }
    
    # Check for polymorphic request bodies
    for my $method (@method_names) {
        my $op = $methods->{$method};
        if ($op->{requestBody} && $op->{requestBody}{content}) {
            my $schema = $op->{requestBody}{content}{'application/json'}{schema} || {};
            
            # Look for oneOf, anyOf, or discriminator
            if ($schema->{oneOf} || $schema->{anyOf} || $schema->{discriminator}) {
                push @polymorphic_endpoints, {
                    path => $path,
                    method => $method,
                    type => $schema->{oneOf} ? 'oneOf' : ($schema->{anyOf} ? 'anyOf' : 'discriminator')
                };
            }
        }
    }
}

# Check for endpoints that might need polymorphic handling based on path
my @potential_polymorphic;
for my $path (sort keys %$paths) {
    # Check for service credential bindings, packages, etc.
    if ($path =~ /service_credential_bindings|packages$/ && exists $paths->{$path}{post}) {
        push @potential_polymorphic, $path;
    }
}

say "=== Shared Path Analysis ===\n";

if (@shared_paths) {
    say "Paths with multiple HTTP methods:";
    for my $sp (@shared_paths) {
        say "  $sp->{path}: " . join(', ', @{$sp->{methods}});
    }
} else {
    say "No paths with multiple HTTP methods found.";
}

say "\n=== Polymorphic Endpoints ===\n";

if (@polymorphic_endpoints) {
    say "Endpoints with polymorphic schemas:";
    for my $pe (@polymorphic_endpoints) {
        say "  $pe->{method} $pe->{path} (uses $pe->{type})";
    }
} else {
    say "No polymorphic schemas found.";
}

if (@potential_polymorphic) {
    say "\nEndpoints that might need polymorphic schemas:";
    for my $path (@potential_polymorphic) {
        say "  POST $path";
    }
}

# Check for duplicate operation IDs
say "\n=== Operation ID Analysis ===\n";

my %op_ids;
for my $path (keys %$paths) {
    for my $method (keys %{$paths->{$path}}) {
        my $op_id = $paths->{$path}{$method}{operationId};
        push @{$op_ids{$op_id}}, "$method $path" if $op_id;
    }
}

my @duplicates = grep { @{$op_ids{$_}} > 1 } keys %op_ids;
if (@duplicates) {
    say "Duplicate operation IDs found:";
    for my $dup (@duplicates) {
        say "  $dup:";
        say "    $_" for @{$op_ids{$dup}};
    }
} else {
    say "No duplicate operation IDs found.";
}