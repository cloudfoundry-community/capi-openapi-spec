#!/usr/bin/env perl

use strict;
use warnings;
use v5.20;
use JSON::XS;
use File::Slurp;
use Term::ANSIColor qw(colored);
use Getopt::Long;

# Command line options
my $spec_file = 'capi/3.195.0/enhanced/openapi.json';
my $cf_config = '~/cf/config.json';
my $verbose = 0;
my $test_writes = 0;

GetOptions(
    'spec=s' => \$spec_file,
    'cf-config=s' => \$cf_config,
    'verbose' => \$verbose,
    'test-writes' => \$test_writes,
) or die usage();

sub usage {
    return <<EOF;
Usage: $0 [options]

Options:
  --spec=FILE        OpenAPI spec file (default: capi/3.195.0/enhanced/openapi.json)
  --cf-config=FILE   CF config file (default: ~/cf/config.json)
  --verbose          Show detailed output
  --test-writes      Also test write operations (POST, PUT, DELETE)

Examples:
  $0                                    # Test read endpoints
  $0 --test-writes                      # Include write operation tests
EOF
}

# Load CF config
print "Loading CF config from $cf_config...\n";
my $cf_config_data = decode_json(read_file($cf_config));
my $api_url = $cf_config_data->{Target};
my $access_token = $cf_config_data->{AccessToken};
my $org_guid = $cf_config_data->{OrganizationFields}{GUID};
my $space_guid = $cf_config_data->{SpaceFields}{GUID};

# Load OpenAPI spec
print "Loading OpenAPI spec from $spec_file...\n";
my $spec = decode_json(read_file($spec_file));

# Test results
my %results = (
    total => 0,
    passed => 0,
    failed => 0,
    endpoints => {}
);

print colored("\nCAPI Live API Testing (using curl)\n", 'bold');
print "=" x 50 . "\n";
print "API URL: $api_url\n";
print "Organization: $cf_config_data->{OrganizationFields}{Name} ($org_guid)\n";
print "Space: $cf_config_data->{SpaceFields}{Name} ($space_guid)\n";
print "CAPI Version (from config): $cf_config_data->{APIVersion}\n";
print "=" x 50 . "\n\n";

# Test endpoints
test_all_endpoints();

# Print summary
print_summary();

sub test_all_endpoints {
    # Test safe read endpoints
    my @test_endpoints = (
        # Info endpoints (no auth required)
        { path => '/', method => 'get', auth => 0 },
        { path => '/v3', method => 'get', auth => 0 },
        { path => '/v3/info', method => 'get', auth => 0 },
        
        # Read-only endpoints
        { path => '/v3/apps', method => 'get', auth => 1 },
        { path => '/v3/organizations', method => 'get', auth => 1 },
        { path => '/v3/spaces', method => 'get', auth => 1 },
        { path => '/v3/buildpacks', method => 'get', auth => 1 },
        { path => '/v3/stacks', method => 'get', auth => 1 },
        { path => '/v3/domains', method => 'get', auth => 1 },
        { path => '/v3/routes', method => 'get', auth => 1 },
        { path => '/v3/service_offerings', method => 'get', auth => 1 },
        { path => '/v3/service_plans', method => 'get', auth => 1 },
        { path => '/v3/users', method => 'get', auth => 1 },
        
        # Specific resource reads
        { path => "/v3/organizations/$org_guid", method => 'get', auth => 1 },
        { path => "/v3/spaces/$space_guid", method => 'get', auth => 1 },
    );
    
    print colored("Testing Read Endpoints\n", 'cyan');
    print "-" x 40 . "\n";
    
    for my $endpoint (@test_endpoints) {
        test_endpoint($endpoint);
    }
    
    # Test write operations if requested
    if ($test_writes) {
        print colored("\nTesting Write Operations\n", 'cyan');
        print "-" x 40 . "\n";
        print colored("WARNING: This will create test resources\n", 'yellow');
        
        test_create_app();
    }
}

sub test_endpoint {
    my ($endpoint) = @_;
    
    $results{total}++;
    
    my $url = "$api_url$endpoint->{path}";
    my $method = uc($endpoint->{method});
    
    print "Testing $method $endpoint->{path}... ";
    
    # Build curl command
    my @curl_cmd = (
        'curl', '-s', '-k', '-w', '%{http_code}:%{time_total}',
        '-X', $method,
        '-H', 'Accept: application/json'
    );
    
    # Add auth header if needed
    if ($endpoint->{auth}) {
        push @curl_cmd, '-H', "Authorization: $access_token";
    }
    
    push @curl_cmd, $url;
    
    # Execute curl
    my $output = `@curl_cmd 2>&1`;
    
    # Parse response
    if ($output =~ /^(.*?)(\d{3}):([0-9.]+)$/s) {
        my $body = $1;
        my $status = $2;
        my $duration = $3;
        
        if ($status >= 200 && $status < 300) {
            print colored("✓", 'green');
            print " ($status in ${duration}s)";
            $results{passed}++;
            
            # Validate response structure
            if ($verbose && $body) {
                my $json = eval { decode_json($body) };
                if (!$@ && ref($json) eq 'HASH') {
                    if ($json->{pagination}) {
                        print colored(" [paginated]", 'cyan');
                    }
                    if (exists $json->{resources}) {
                        my $count = @{$json->{resources}};
                        print colored(" [$count resources]", 'cyan');
                    }
                }
            }
        } elsif ($status == 404 && $endpoint->{path} =~ /\{[^}]+\}/) {
            print colored("○", 'yellow');
            print " (404 - expected for parameterized path)";
            $results{passed}++;
        } else {
            print colored("✗", 'red');
            print " ($status)";
            $results{failed}++;
            
            if ($verbose) {
                print "\n  Response: $body\n" if $body;
            }
        }
    } else {
        print colored("✗", 'red');
        print " (curl error)";
        $results{failed}++;
        
        if ($verbose) {
            print "\n  Error: $output\n";
        }
    }
    
    print "\n";
}

sub test_create_app {
    my $test_app_name = "capi-openapi-test-" . time();
    
    print "\nCreating test app: $test_app_name\n";
    
    my $url = "$api_url/v3/apps";
    my $app_data = {
        name => $test_app_name,
        relationships => {
            space => {
                data => {
                    guid => $space_guid
                }
            }
        }
    };
    
    my $json_data = encode_json($app_data);
    
    # Create app
    my @curl_cmd = (
        'curl', '-s', '-k', '-w', '%{http_code}',
        '-X', 'POST',
        '-H', 'Content-Type: application/json',
        '-H', 'Accept: application/json',
        '-H', "Authorization: $access_token",
        '-d', $json_data,
        $url
    );
    
    my $output = `@curl_cmd 2>&1`;
    
    if ($output =~ /^(.*?)(\d{3})$/s) {
        my $body = $1;
        my $status = $2;
        
        if ($status == 201) {
            print colored("✓ Test app created successfully\n", 'green');
            
            my $app = decode_json($body);
            my $app_guid = $app->{guid};
            
            # Test GET on the created app
            test_endpoint({ 
                path => "/v3/apps/$app_guid", 
                method => 'get', 
                auth => 1 
            });
            
            # Clean up - delete the app
            print "Cleaning up test app...\n";
            
            my @delete_cmd = (
                'curl', '-s', '-k', '-w', '%{http_code}',
                '-X', 'DELETE',
                '-H', "Authorization: $access_token",
                "$api_url/v3/apps/$app_guid"
            );
            
            my $delete_output = `@delete_cmd 2>&1`;
            if ($delete_output =~ /202$/) {
                print colored("✓ Test app deleted\n", 'green');
            }
        } else {
            print colored("✗ Failed to create test app (HTTP $status)\n", 'red');
            if ($verbose) {
                print "Response: $body\n";
            }
        }
    }
}

sub print_summary {
    print "\n" . "=" x 50 . "\n";
    print colored("Test Summary\n", 'bold');
    print "=" x 50 . "\n\n";
    
    print "Total Endpoints Tested: $results{total}\n";
    print colored("Passed: $results{passed}\n", 'green') if $results{passed};
    print colored("Failed: $results{failed}\n", 'red') if $results{failed};
    
    # Success rate
    if ($results{total} > 0) {
        my $success_rate = int(($results{passed} / $results{total}) * 100);
        print "\nSuccess Rate: $success_rate%\n";
    }
    
    # Check OpenAPI version match
    print "\nVersion Check:\n";
    print "  OpenAPI Spec Version: " . ($spec->{info}{version} || 'unknown') . "\n";
    print "  Live API Version: $cf_config_data->{APIVersion}\n";
    
    if ($spec->{info}{version} && $spec->{info}{version} ne $cf_config_data->{APIVersion}) {
        print colored("  ⚠ Version mismatch - results may vary\n", 'yellow');
    }
    
    if ($results{failed} == 0 && $results{passed} > 0) {
        print colored("\n✓ All tested endpoints are accessible and match expected patterns!\n", 'green');
    }
}