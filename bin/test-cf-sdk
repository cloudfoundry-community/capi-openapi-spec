#!/usr/bin/env perl

use strict;
use warnings;
use v5.20;
use JSON::XS;
use File::Spec;
use File::Basename;
use Getopt::Long;

my $version = '3.195.0';
my $language = 'go';
my $cf_api;
my $cf_user;
my $cf_password;
my $help;

GetOptions(
    'version=s' => \$version,
    'language=s' => \$language,
    'api=s' => \$cf_api,
    'user=s' => \$cf_user,
    'password=s' => \$cf_password,
    'help' => \$help,
) or die "Error in command line arguments\n";

if ($help) {
    print <<EOF;
Usage: test-cf-sdk [options]

Test generated SDK against live CF API

Options:
  --version=VERSION   CAPI version (default: 3.195.0)
  --language=LANG     SDK language (default: go)
  --api=URL          CF API endpoint
  --user=USERNAME    CF username
  --password=PASS    CF password
  --help             Show this help

Examples:
  # Test with existing cf login
  test-cf-sdk

  # Test with credentials
  test-cf-sdk --api=https://api.cf.example.com --user=admin --password=secret

EOF
    exit 0;
}

# Get CF credentials
if (!$cf_api) {
    my $api_output = `cf api 2>&1`;
    if ($api_output =~ /endpoint:\s*(\S+)/) {
        $cf_api = $1;
    } else {
        die "Could not determine CF API endpoint. Please login with 'cf login' or provide --api\n";
    }
}

# Get auth token
my $token_output = `cf oauth-token 2>&1`;
my $cf_token;
if ($token_output =~ /(bearer\s+\S+)/i) {
    $cf_token = $1;
} else {
    die "Could not get CF token. Please login with 'cf login'\n";
}

say "Testing $language SDK v$version against $cf_api";

# Run language-specific tests
if ($language eq 'go') {
    test_go_sdk();
} elsif ($language eq 'python') {
    test_python_sdk();
} elsif ($language eq 'java') {
    test_java_sdk();
} else {
    die "Unsupported language: $language\n";
}

sub test_go_sdk {
    my $sdk_dir = "sdk/$version/go/capiclient";
    
    unless (-d $sdk_dir) {
        die "SDK not found at $sdk_dir. Please generate it first.\n";
    }
    
    # Create test file
    my $test_file = "$sdk_dir/e2e_test.go";
    
    open my $fh, '>', $test_file or die "Cannot create test file: $!";
    print $fh get_go_test_code();
    close $fh;
    
    # Run tests
    say "Running Go SDK tests...";
    $ENV{CF_API} = $cf_api;
    $ENV{CF_TOKEN} = $cf_token;
    
    system("cd $sdk_dir && go test -v");
    
    # Clean up
    unlink $test_file;
}

sub get_go_test_code {
    return <<'GO_CODE';
package capiclient

import (
    "context"
    "os"
    "strings"
    "testing"
)

func TestLiveCFAPI(t *testing.T) {
    cfAPI := os.Getenv("CF_API")
    cfToken := os.Getenv("CF_TOKEN")
    
    if cfAPI == "" || cfToken == "" {
        t.Skip("CF_API and CF_TOKEN not set")
    }
    
    cfg := NewConfiguration()
    cfg.Host = strings.TrimPrefix(cfAPI, "https://")
    cfg.Scheme = "https"
    cfg.AddDefaultHeader("Authorization", cfToken)
    
    client := NewAPIClient(cfg)
    ctx := context.Background()
    
    t.Run("GetAPIInfo", func(t *testing.T) {
        info, resp, err := client.DefaultApi.GetApiInfo(ctx).Execute()
        if err != nil {
            t.Fatalf("Failed to get API info: %v", err)
        }
        if resp.StatusCode != 200 {
            t.Fatalf("Expected 200, got %d", resp.StatusCode)
        }
        if info.ApiVersion == nil {
            t.Fatal("API version is nil")
        }
        t.Logf("API Version: %s", *info.ApiVersion)
    })
    
    t.Run("ListOrganizations", func(t *testing.T) {
        orgs, _, err := client.OrganizationsApi.GetOrganizations(ctx).Execute()
        if err != nil {
            t.Fatalf("Failed to list orgs: %v", err)
        }
        t.Logf("Found %d organizations", len(orgs.Resources))
    })
    
    t.Run("ListApps", func(t *testing.T) {
        apps, _, err := client.AppsApi.GetApps(ctx).PerPage(5).Execute()
        if err != nil {
            t.Fatalf("Failed to list apps: %v", err)
        }
        t.Logf("Found %d apps", len(apps.Resources))
    })
}
GO_CODE
}

sub test_python_sdk {
    say "Python SDK testing not yet implemented";
}

sub test_java_sdk {
    say "Java SDK testing not yet implemented";
}