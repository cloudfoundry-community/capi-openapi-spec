#!/usr/bin/env perl

use strict;
use warnings;
use v5.20;
use File::Spec;
use Getopt::Long;
use JSON::XS;
use Term::ANSIColor qw(colored);

# Parse command line options
my $version = $ENV{CAPI_VERSION} || '3.195.0';
my $format = 'yaml';
my $verbose = 0;
my $help = 0;

GetOptions(
    'version=s' => \$version,
    'format=s' => \$format,
    'verbose' => \$verbose,
    'help' => \$help,
) or die "Error in command line arguments\n";

if ($help) {
    print_usage();
    exit 0;
}

# Validate inputs
unless ($format =~ /^(yaml|json)$/) {
    die "Invalid format: $format. Must be 'yaml' or 'json'\n";
}

# Build file path
my $spec_file = File::Spec->catfile('capi', $version, "openapi.$format");

unless (-f $spec_file) {
    die "Specification file not found: $spec_file\n";
}

print colored("Validating CAPI OpenAPI Specification\n", 'bold');
print "Version: $version\n";
print "File: $spec_file\n\n";

# Check if Spectral is installed
my $spectral_check = `which spectral 2>&1`;
if ($? != 0) {
    print colored("Spectral not found. Installing dependencies...\n", 'yellow');
    system('bun install') == 0 or die "Failed to install dependencies\n";
}

# Run Spectral validation
print colored("Running Spectral validation...\n", 'cyan');
my $cmd = "bunx spectral lint '$spec_file' --ruleset config/.spectral.yml";
$cmd .= " --verbose" if $verbose;

my $output = `$cmd 2>&1`;
my $exit_code = $? >> 8;

# Parse and display results
if ($exit_code == 0) {
    print colored("✓ Validation passed!\n", 'green');
    print $output if $verbose;
} else {
    # Parse Spectral output to categorize issues
    my @lines = split /\n/, $output;
    my %issues = (
        error => [],
        warning => [],
        info => [],
        hint => []
    );
    
    foreach my $line (@lines) {
        if ($line =~ /^\s*(\d+:\d+)\s+(error|warning|info|hint)\s+(.+)$/) {
            my ($location, $severity, $message) = ($1, $2, $3);
            push @{$issues{$severity}}, {
                location => $location,
                message => $message
            };
        }
    }
    
    # Determine if there are actual errors or issues
    my $error_count = scalar @{$issues{error}};
    my $warning_count = scalar @{$issues{warning}};
    my $info_count = scalar @{$issues{info}};
    my $hint_count = scalar @{$issues{hint}};
    my $total_issues = $error_count + $warning_count + $info_count + $hint_count;
    
    if ($error_count > 0) {
        print colored("✗ Validation failed with errors:\n", 'red');
    } elsif ($total_issues > 0) {
        print colored("⚠ Validation completed with issues:\n", 'yellow');
    } else {
        print colored("✓ Validation passed!\n", 'green');
    }
    
    # Display categorized issues
    foreach my $severity (qw(error warning info hint)) {
        my $count = scalar @{$issues{$severity}};
        next if $count == 0;
        
        my $color = $severity eq 'error' ? 'red' : 
                   $severity eq 'warning' ? 'yellow' :
                   $severity eq 'info' ? 'cyan' : 'white';
                   
        print colored("\n$count ${severity}(s):\n", $color);
        
        foreach my $issue (@{$issues{$severity}}) {
            print "  $issue->{location} - $issue->{message}\n";
        }
    }
    
    # Summary
    print "\n" . colored("Summary:\n", 'bold');
    print "  Errors: " . colored(scalar(@{$issues{error}}), 'red') . "\n";
    print "  Warnings: " . colored(scalar(@{$issues{warning}}), 'yellow') . "\n";
    print "  Info: " . colored(scalar(@{$issues{info}}), 'cyan') . "\n";
    print "  Hints: " . colored(scalar(@{$issues{hint}}), 'white') . "\n";
}

# Additional CAPI-specific validations
print colored("\nRunning CAPI-specific validations...\n", 'cyan');
run_capi_validations($spec_file);

sub run_capi_validations {
    my ($file) = @_;
    
    # Load the spec
    my $content = do {
        local $/;
        open my $fh, '<', $file or die "Cannot read $file: $!";
        <$fh>;
    };
    
    my $spec;
    if ($format eq 'json') {
        $spec = decode_json($content);
    } else {
        # For YAML, we'll use the JSON version for validation
        my $json_file = $file;
        $json_file =~ s/\.yaml$/.json/;
        if (-f $json_file) {
            $content = do {
                local $/;
                open my $fh, '<', $json_file or die "Cannot read $json_file: $!";
                <$fh>;
            };
            $spec = decode_json($content);
        } else {
            print colored("  Skipping CAPI validations (JSON file not found)\n", 'yellow');
            return;
        }
    }
    
    # Check for required CAPI elements
    my @checks = (
        {
            name => 'API version matches CAPI version',
            test => sub { $spec->{info}{version} eq $version }
        },
        {
            name => 'Security schemes defined',
            test => sub { exists $spec->{components}{securitySchemes} }
        },
        {
            name => 'All paths start with /v3',
            test => sub { 
                my @bad_paths = grep { !/^\/v3(\/|$)/ } keys %{$spec->{paths}};
                return @bad_paths == 0;
            }
        },
        {
            name => 'Error schema component exists',
            test => sub { 
                exists $spec->{components}{schemas} && 
                exists $spec->{components}{schemas}{Error}
            }
        },
        {
            name => 'Pagination parameters defined',
            test => sub {
                exists $spec->{components}{parameters} &&
                exists $spec->{components}{parameters}{PageParameter} &&
                exists $spec->{components}{parameters}{PerPageParameter}
            }
        }
    );
    
    my $passed = 0;
    my $failed = 0;
    
    foreach my $check (@checks) {
        if ($check->{test}->()) {
            print colored("  ✓ ", 'green') . "$check->{name}\n";
            $passed++;
        } else {
            print colored("  ✗ ", 'red') . "$check->{name}\n";
            $failed++;
        }
    }
    
    print "\nCAPI validation: ";
    print colored("$passed passed", 'green');
    print ", ";
    print colored("$failed failed", 'red') if $failed > 0;
    print "\n";
}

sub print_usage {
    print <<'USAGE';
Usage: validate-spec [OPTIONS]

Validate CAPI OpenAPI specification using Spectral and custom rules.

Options:
  --version=VERSION   CAPI version to validate (default: 3.195.0)
  --format=FORMAT    File format: yaml or json (default: yaml)
  --verbose          Show detailed validation output
  --help             Show this help message

Examples:
  validate-spec
  validate-spec --version=3.195.0
  validate-spec --format=json --verbose

USAGE
}