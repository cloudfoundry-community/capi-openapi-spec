#!/usr/bin/env perl

use strict;
use warnings;
use v5.20;
use JSON::XS;
use File::Slurp;
use Term::ANSIColor qw(colored);
use Getopt::Long;
use Time::HiRes qw(time sleep);
use POSIX qw(strftime);
use File::Temp qw(tempdir);
use File::Spec;

# Command line options
my $cf_config = '~/cf/config.json';
my $sdk_language = 'go';  # Default to Go SDK
my $cleanup = 1;
my $verbose = 0;
my $test_prefix = "capi-sdk-test-" . strftime("%Y%m%d-%H%M%S", localtime);

GetOptions(
    'cf-config=s' => \$cf_config,
    'sdk=s' => \$sdk_language,
    'cleanup!' => \$cleanup,
    'verbose' => \$verbose,
    'prefix=s' => \$test_prefix,
) or die usage();

sub usage {
    return <<EOF;
Usage: $0 [options]

Options:
  --cf-config=FILE   CF config file (default: ~/cf/config.json)
  --sdk=LANGUAGE     SDK language to test (go, python, java, typescript-node)
  --no-cleanup       Don't cleanup resources after test
  --verbose          Show detailed output
  --prefix=STRING    Prefix for test resources (default: capi-sdk-test-TIMESTAMP)

This script tests the full application lifecycle using OpenAPI-generated SDK clients.
It validates that the generated SDKs can perform all lifecycle operations.

Examples:
  $0                                    # Test with Go SDK
  $0 --sdk=python                       # Test with Python SDK
  $0 --sdk=typescript-node --verbose    # Test with TypeScript SDK
EOF
}

# Load CF config
print "Loading CF config from $cf_config...\n";
my $cf_config_data = decode_json(read_file($cf_config));
my $api_url = $cf_config_data->{Target};
my $access_token = $cf_config_data->{AccessToken};

# Remove 'bearer ' prefix if present
$access_token =~ s/^bearer\s+//i;

print colored("\nCloud Foundry Application Lifecycle Test (SDK)\n", 'bold');
print "=" x 60 . "\n";
print "API URL: $api_url\n";
print "SDK Language: $sdk_language\n";
print "Test Prefix: $test_prefix\n";
print "Cleanup: " . ($cleanup ? "Yes" : "No") . "\n";
print "=" x 60 . "\n\n";

# Generate SDK if needed
generate_sdk_if_needed();

# Create and run language-specific test
if ($sdk_language eq 'go') {
    run_go_lifecycle_test();
} elsif ($sdk_language eq 'python') {
    run_python_lifecycle_test();
} elsif ($sdk_language eq 'typescript-node') {
    run_typescript_lifecycle_test();
} elsif ($sdk_language eq 'java') {
    run_java_lifecycle_test();
} else {
    die "Unsupported SDK language: $sdk_language\n";
}

# Helper functions
sub generate_sdk_if_needed {
    my $sdk_dir = "sdk/3.195.0/$sdk_language";
    
    unless (-d $sdk_dir) {
        print "Generating $sdk_language SDK...\n";
        system("./bin/gen --version=3.195.0 --language=$sdk_language");
        die "Failed to generate SDK\n" unless -d $sdk_dir;
    }
}

sub run_go_lifecycle_test {
    print "Running Go SDK lifecycle test...\n\n";
    
    # Create Go test program
    my $test_dir = tempdir(CLEANUP => 1);
    my $test_file = "$test_dir/lifecycle_test.go";
    
    my $go_test = <<'GO_TEST';
package main

import (
    "context"
    "fmt"
    "log"
    "os"
    "time"
    "encoding/json"
    
    capiclient "github.com/cloudfoundry-community/capi-openapi-go-client/capiclient/v3"
)

type TestResult struct {
    Step    string `json:"step"`
    Success bool   `json:"success"`
    Message string `json:"message"`
    Data    interface{} `json:"data,omitempty"`
}

var results []TestResult
var createdResources struct {
    OrgGUID   string
    SpaceGUID string
    AppGUID   string
    RouteGUID string
}

func main() {
    apiURL := os.Getenv("CF_API_URL")
    token := os.Getenv("CF_ACCESS_TOKEN")
    testPrefix := os.Getenv("TEST_PREFIX")
    cleanup := os.Getenv("CLEANUP") == "true"
    
    // Create client
    client, err := capiclient.NewClient(apiURL, capiclient.WithRequestEditorFn(func(ctx context.Context, req *http.Request) error {
        req.Header.Set("Authorization", "bearer " + token)
        return nil
    }))
    if err != nil {
        log.Fatal("Failed to create client:", err)
    }
    
    ctx := context.Background()
    
    // Test authentication
    testAuth(ctx, client)
    
    // Create organization
    createOrg(ctx, client, testPrefix)
    
    // Create space
    createSpace(ctx, client, testPrefix)
    
    // Create application
    createApp(ctx, client, testPrefix)
    
    // Start application
    startApp(ctx, client)
    
    // Scale application
    scaleApp(ctx, client)
    
    // Get environment
    getAppEnv(ctx, client)
    
    // Stop application
    stopApp(ctx, client)
    
    // Cleanup if requested
    if cleanup {
        cleanupResources(ctx, client)
    }
    
    // Output results as JSON
    output, _ := json.Marshal(results)
    fmt.Println(string(output))
}

func testAuth(ctx context.Context, client *capiclient.Client) {
    resp, err := client.ListApps(ctx, &capiclient.ListAppsParams{
        PerPage: capiclient.Int(1),
    })
    
    if err != nil {
        recordResult("Test Authentication", false, err.Error(), nil)
        os.Exit(1)
    }
    
    recordResult("Test Authentication", true, "Authentication successful", nil)
}

func createOrg(ctx context.Context, client *capiclient.Client, prefix string) {
    orgName := fmt.Sprintf("%s-org", prefix)
    
    resp, err := client.CreateOrganization(ctx, capiclient.V3OrganizationsJSONRequestBody{
        Name: orgName,
        Metadata: &capiclient.V3OrganizationCreateMetadata{
            Labels: &map[string]string{
                "test-type": "lifecycle-sdk",
            },
        },
    })
    
    if err != nil {
        recordResult("Create Organization", false, err.Error(), nil)
        os.Exit(1)
    }
    
    var org capiclient.V3Organization
    json.NewDecoder(resp.Body).Decode(&org)
    createdResources.OrgGUID = *org.Guid
    
    recordResult("Create Organization", true, fmt.Sprintf("Created: %s", *org.Guid), org)
}

func createSpace(ctx context.Context, client *capiclient.Client, prefix string) {
    spaceName := fmt.Sprintf("%s-space", prefix)
    
    resp, err := client.CreateSpace(ctx, capiclient.V3SpacesJSONRequestBody{
        Name: spaceName,
        Relationships: capiclient.V3SpaceRelationships{
            Organization: capiclient.V3ToOneRelationship{
                Data: &capiclient.V3Relationship{
                    Guid: &createdResources.OrgGUID,
                },
            },
        },
    })
    
    if err != nil {
        recordResult("Create Space", false, err.Error(), nil)
        os.Exit(1)
    }
    
    var space capiclient.V3Space
    json.NewDecoder(resp.Body).Decode(&space)
    createdResources.SpaceGUID = *space.Guid
    
    recordResult("Create Space", true, fmt.Sprintf("Created: %s", *space.Guid), space)
}

func createApp(ctx context.Context, client *capiclient.Client, prefix string) {
    appName := fmt.Sprintf("%s-app", prefix)
    buildpack := "staticfile_buildpack"
    stack := "cflinuxfs4"
    
    resp, err := client.CreateApp(ctx, capiclient.V3AppsJSONRequestBody{
        Name: appName,
        Lifecycle: &capiclient.V3AppCreateLifecycle{
            Type: "buildpack",
            Data: &capiclient.V3AppLifecycleBuildpack{
                Buildpacks: &[]string{buildpack},
                Stack: &stack,
            },
        },
        Relationships: &capiclient.V3AppRelationships{
            Space: capiclient.V3ToOneRelationship{
                Data: &capiclient.V3Relationship{
                    Guid: &createdResources.SpaceGUID,
                },
            },
        },
    })
    
    if err != nil {
        recordResult("Create Application", false, err.Error(), nil)
        os.Exit(1)
    }
    
    var app capiclient.V3App
    json.NewDecoder(resp.Body).Decode(&app)
    createdResources.AppGUID = *app.Guid
    
    recordResult("Create Application", true, fmt.Sprintf("Created: %s", *app.Guid), app)
}

func startApp(ctx context.Context, client *capiclient.Client) {
    resp, err := client.StartApp(ctx, createdResources.AppGUID)
    
    if err != nil {
        recordResult("Start Application", false, err.Error(), nil)
        return
    }
    
    recordResult("Start Application", true, "Application started", nil)
}

func scaleApp(ctx context.Context, client *capiclient.Client) {
    // Scale to 2 instances
    instances := 2
    resp, err := client.ScaleAppProcess(ctx, createdResources.AppGUID, "web", 
        capiclient.V3AppsGuidProcessesTypeActionsScaleJSONRequestBody{
            Instances: &instances,
        })
    
    if err != nil {
        recordResult("Scale Application", false, err.Error(), nil)
        return
    }
    
    recordResult("Scale Application", true, fmt.Sprintf("Scaled to %d instances", instances), nil)
}

func getAppEnv(ctx context.Context, client *capiclient.Client) {
    resp, err := client.GetAppEnv(ctx, createdResources.AppGUID)
    
    if err != nil {
        recordResult("Get App Environment", false, err.Error(), nil)
        return
    }
    
    var env capiclient.V3AppEnv
    json.NewDecoder(resp.Body).Decode(&env)
    
    recordResult("Get App Environment", true, "Retrieved environment", env)
}

func stopApp(ctx context.Context, client *capiclient.Client) {
    resp, err := client.StopApp(ctx, createdResources.AppGUID)
    
    if err != nil {
        recordResult("Stop Application", false, err.Error(), nil)
        return
    }
    
    recordResult("Stop Application", true, "Application stopped", nil)
}

func cleanupResources(ctx context.Context, client *capiclient.Client) {
    // Delete app
    if createdResources.AppGUID != "" {
        client.DeleteApp(ctx, createdResources.AppGUID)
        recordResult("Delete Application", true, "Deleted", nil)
    }
    
    // Delete space
    if createdResources.SpaceGUID != "" {
        client.DeleteSpace(ctx, createdResources.SpaceGUID)
        recordResult("Delete Space", true, "Deleted", nil)
    }
    
    // Delete org
    if createdResources.OrgGUID != "" {
        client.DeleteOrganization(ctx, createdResources.OrgGUID)
        recordResult("Delete Organization", true, "Deleted", nil)
    }
}

func recordResult(step string, success bool, message string, data interface{}) {
    results = append(results, TestResult{
        Step:    step,
        Success: success,
        Message: message,
        Data:    data,
    })
}
GO_TEST

    # Add missing import
    $go_test =~ s/import \(/import (\n    "net\/http"/;
    
    write_file($test_file, $go_test);
    
    # Create go.mod
    my $go_mod = <<'GO_MOD';
module lifecycle-test

go 1.19

require github.com/cloudfoundry-community/capi-openapi-go-client/capiclient/v3 v3.0.0

replace github.com/cloudfoundry-community/capi-openapi-go-client/capiclient/v3 => ../../../sdk/3.195.0/go
GO_MOD
    
    write_file("$test_dir/go.mod", $go_mod);
    
    # Set environment variables
    $ENV{CF_API_URL} = $api_url;
    $ENV{CF_ACCESS_TOKEN} = $access_token;
    $ENV{TEST_PREFIX} = $test_prefix;
    $ENV{CLEANUP} = $cleanup ? 'true' : 'false';
    
    # Run the test
    my $output = `cd $test_dir && go mod tidy && go run lifecycle_test.go 2>&1`;
    
    if ($? == 0) {
        # Parse and display results
        my $results = eval { decode_json($output) };
        if ($results) {
            display_test_results($results);
        } else {
            print "Test output:\n$output\n";
        }
    } else {
        print colored("Test failed to run:\n", 'red');
        print $output;
    }
}

sub run_python_lifecycle_test {
    print "Running Python SDK lifecycle test...\n\n";
    
    # Create Python test program
    my $test_dir = tempdir(CLEANUP => 1);
    my $test_file = "$test_dir/lifecycle_test.py";
    
    my $python_test = <<'PYTHON_TEST';
#!/usr/bin/env python3

import os
import sys
import json
import time
from datetime import datetime

# Add SDK to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../sdk/3.195.0/python'))

import capi_client
from capi_client.api import apps_api, organizations_api, spaces_api
from capi_client.model.v3_app import V3App
from capi_client.model.v3_organization import V3Organization
from capi_client.model.v3_space import V3Space

results = []
created_resources = {
    'org_guid': None,
    'space_guid': None,
    'app_guid': None
}

def main():
    api_url = os.environ['CF_API_URL']
    token = os.environ['CF_ACCESS_TOKEN']
    test_prefix = os.environ['TEST_PREFIX']
    cleanup = os.environ.get('CLEANUP', 'false') == 'true'
    
    # Configure client
    configuration = capi_client.Configuration(
        host=api_url
    )
    configuration.access_token = token
    
    with capi_client.ApiClient(configuration) as api_client:
        # Test authentication
        test_auth(api_client)
        
        # Create organization
        create_org(api_client, test_prefix)
        
        # Create space
        create_space(api_client, test_prefix)
        
        # Create application
        create_app(api_client, test_prefix)
        
        # Get environment
        get_app_env(api_client)
        
        # Cleanup if requested
        if cleanup:
            cleanup_resources(api_client)
    
    # Output results
    print(json.dumps(results))

def test_auth(api_client):
    try:
        api = apps_api.AppsApi(api_client)
        api.list_apps(per_page=1)
        record_result("Test Authentication", True, "Authentication successful")
    except Exception as e:
        record_result("Test Authentication", False, str(e))
        sys.exit(1)

def create_org(api_client, prefix):
    try:
        api = organizations_api.OrganizationsApi(api_client)
        org_name = f"{prefix}-org"
        
        org = api.create_organization(
            v3_organization={
                "name": org_name,
                "metadata": {
                    "labels": {
                        "test-type": "lifecycle-sdk"
                    }
                }
            }
        )
        
        created_resources['org_guid'] = org.guid
        record_result("Create Organization", True, f"Created: {org.guid}", org.to_dict())
    except Exception as e:
        record_result("Create Organization", False, str(e))
        sys.exit(1)

def create_space(api_client, prefix):
    try:
        api = spaces_api.SpacesApi(api_client)
        space_name = f"{prefix}-space"
        
        space = api.create_space(
            v3_space={
                "name": space_name,
                "relationships": {
                    "organization": {
                        "data": {
                            "guid": created_resources['org_guid']
                        }
                    }
                }
            }
        )
        
        created_resources['space_guid'] = space.guid
        record_result("Create Space", True, f"Created: {space.guid}", space.to_dict())
    except Exception as e:
        record_result("Create Space", False, str(e))
        sys.exit(1)

def create_app(api_client, prefix):
    try:
        api = apps_api.AppsApi(api_client)
        app_name = f"{prefix}-app"
        
        app = api.create_app(
            v3_app={
                "name": app_name,
                "lifecycle": {
                    "type": "buildpack",
                    "data": {
                        "buildpacks": ["staticfile_buildpack"],
                        "stack": "cflinuxfs4"
                    }
                },
                "relationships": {
                    "space": {
                        "data": {
                            "guid": created_resources['space_guid']
                        }
                    }
                }
            }
        )
        
        created_resources['app_guid'] = app.guid
        record_result("Create Application", True, f"Created: {app.guid}", app.to_dict())
    except Exception as e:
        record_result("Create Application", False, str(e))

def get_app_env(api_client):
    try:
        api = apps_api.AppsApi(api_client)
        env = api.get_app_env(created_resources['app_guid'])
        record_result("Get App Environment", True, "Retrieved environment", env.to_dict())
    except Exception as e:
        record_result("Get App Environment", False, str(e))

def cleanup_resources(api_client):
    # Delete app
    if created_resources['app_guid']:
        try:
            apps_api.AppsApi(api_client).delete_app(created_resources['app_guid'])
            record_result("Delete Application", True, "Deleted")
        except:
            pass
    
    # Delete space
    if created_resources['space_guid']:
        try:
            spaces_api.SpacesApi(api_client).delete_space(created_resources['space_guid'])
            record_result("Delete Space", True, "Deleted")
        except:
            pass
    
    # Delete org
    if created_resources['org_guid']:
        try:
            organizations_api.OrganizationsApi(api_client).delete_organization(created_resources['org_guid'])
            record_result("Delete Organization", True, "Deleted")
        except:
            pass

def record_result(step, success, message, data=None):
    results.append({
        "step": step,
        "success": success,
        "message": message,
        "data": data
    })

if __name__ == "__main__":
    main()
PYTHON_TEST
    
    write_file($test_file, $python_test);
    system("chmod +x $test_file");
    
    # Set environment variables
    $ENV{CF_API_URL} = $api_url;
    $ENV{CF_ACCESS_TOKEN} = $access_token;
    $ENV{TEST_PREFIX} = $test_prefix;
    $ENV{CLEANUP} = $cleanup ? 'true' : 'false';
    
    # Run the test
    my $output = `cd $test_dir && python3 lifecycle_test.py 2>&1`;
    
    if ($? == 0) {
        # Parse and display results
        my $results = eval { decode_json($output) };
        if ($results) {
            display_test_results($results);
        } else {
            print "Test output:\n$output\n";
        }
    } else {
        print colored("Test failed to run:\n", 'red');
        print $output;
    }
}

sub run_typescript_lifecycle_test {
    print colored("TypeScript SDK test not yet implemented\n", 'yellow');
    print "Would test using generated TypeScript client from sdk/3.195.0/typescript-node\n";
}

sub run_java_lifecycle_test {
    print colored("Java SDK test not yet implemented\n", 'yellow');
    print "Would test using generated Java client from sdk/3.195.0/java\n";
}

sub display_test_results {
    my ($results) = @_;
    
    my $passed = 0;
    my $failed = 0;
    
    for my $result (@$results) {
        if ($result->{success}) {
            print colored("✓", 'green');
            print " $result->{step}: $result->{message}\n";
            $passed++;
        } else {
            print colored("✗", 'red');
            print " $result->{step}: $result->{message}\n";
            $failed++;
        }
        
        if ($verbose && $result->{data}) {
            print "  Data: " . substr(encode_json($result->{data}), 0, 100) . "...\n";
        }
    }
    
    print "\n" . "=" x 60 . "\n";
    print colored("SDK Lifecycle Test Summary\n", 'bold');
    print "=" x 60 . "\n";
    print "SDK Language: $sdk_language\n";
    print colored("Passed: $passed\n", 'green') if $passed;
    print colored("Failed: $failed\n", 'red') if $failed;
    
    if ($failed == 0) {
        print colored("\n✓ SDK successfully validated for lifecycle operations!\n", 'green');
    } else {
        print colored("\n✗ SDK validation failed\n", 'red');
        exit 1;
    }
}